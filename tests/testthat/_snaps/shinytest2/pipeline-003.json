{
  "input": {
    "add_to_list_button": 0,
    "begin_button": 1,
    "bul_x3p_name": "Barrel_1.Bullet_2.Land_.x3p",
    "doprocess": 0,
    "prevreport": "Upload Bullet"
  },
  "output": {
    "CCBull1": {
      "message": "",
      "call": "NULL",
      "type": [
        "shiny.silent.error",
        "validation"
      ]
    },
    "CCBull2": {
      "message": "",
      "call": "NULL",
      "type": [
        "shiny.silent.error",
        "validation"
      ]
    },
    "bul_x3pui": {
      "html": "<div class=\"form-group shiny-input-container\">\n  <label class=\"control-label\" id=\"upload_button-label\" for=\"upload_button\">Select Bullet Land x3p files<\/label>\n  <div class=\"input-group\">\n    <label class=\"input-group-btn input-group-prepend\">\n      <span class=\"btn btn-default btn-file\">\n        Browse...\n        <input id=\"upload_button\" class=\"shiny-input-file\" name=\"upload_button\" type=\"file\" style=\"position: absolute !important; top: -99999px !important; left: -99999px !important;\" multiple=\"multiple\" accept=\".x3p\"/>\n      <\/span>\n    <\/label>\n    <input type=\"text\" class=\"form-control\" placeholder=\"No file selected\" readonly=\"readonly\"/>\n  <\/div>\n  <div id=\"upload_button_progress\" class=\"progress active shiny-file-input-progress\">\n    <div class=\"progress-bar\"><\/div>\n  <\/div>\n<\/div>",
      "deps": [

      ]
    },
    "bullSelCheckboxUI": {
      "message": "",
      "call": "NULL",
      "type": [
        "shiny.silent.error",
        "validation"
      ]
    },
    "grooveBullSelUI": {
      "message": "",
      "call": "NULL",
      "type": [
        "shiny.silent.error",
        "validation"
      ]
    },
    "grooveLandSelUI": {
      "message": "",
      "call": "NULL",
      "type": [
        "shiny.silent.error",
        "validation"
      ]
    },
    "grooveSlidersUI": {
      "message": "",
      "call": "NULL",
      "type": [
        "shiny.silent.error",
        "validation"
      ]
    },
    "groovesButtonsUI": {
      "message": "",
      "call": "NULL",
      "type": [
        "shiny.silent.error",
        "validation"
      ]
    },
    "lpupload": {
      "html": "<div class=\"bslib-grid bslib-mb-spacing html-fill-item\" data-require-bs-caller=\"layout_column_wrap()\" data-require-bs-version=\"5\" style=\"grid-template-columns:repeat(6, minmax(0, 1fr));grid-auto-rows:1fr;--bslib-grid-height:auto;--bslib-grid-height-mobile:auto;\">\n  <div class=\"bslib-grid-item bslib-gap-spacing html-fill-container\">\n    <div class=\"card bslib-card bslib-mb-spacing html-fill-item html-fill-container\" data-bslib-card-init data-require-bs-caller=\"card()\" data-require-bs-version=\"5\" style=\"max-height:600px;\">\n      <div class=\"card-header bg-dark\">Land 1<\/div>\n      <div class=\"card-body bslib-gap-spacing html-fill-item html-fill-container\" style=\"margin-top:auto;margin-bottom:auto;flex:1 1 auto;\">\n        <p id=\"x3prgl1-aria\" hidden>3D plot<\/p>\n        <div class=\"html-fill-item\">\n          <p id=\"x3prgl1-aria\" hidden>3D plot 1<\/p>\n          <div id=\"x3prgl1\" style=\"width:200px;height:600px;\" class=\"rglWebGL html-widget html-widget-output shiny-report-size\" role=\"img\" aria-labelledby=\"x3prgl1-aria\"><\/div>\n        <\/div>\n      <\/div>\n      <script data-bslib-card-init>bslib.Card.initializeAllCards();<\/script>\n    <\/div>\n  <\/div>\n  <div class=\"bslib-grid-item bslib-gap-spacing html-fill-container\">\n    <div class=\"card bslib-card bslib-mb-spacing html-fill-item html-fill-container\" data-bslib-card-init data-require-bs-caller=\"card()\" data-require-bs-version=\"5\" style=\"max-height:600px;\">\n      <div class=\"card-header bg-dark\">Land 2<\/div>\n      <div class=\"card-body bslib-gap-spacing html-fill-item html-fill-container\" style=\"margin-top:auto;margin-bottom:auto;flex:1 1 auto;\">\n        <p id=\"x3prgl2-aria\" hidden>3D plot<\/p>\n        <div class=\"html-fill-item\">\n          <p id=\"x3prgl2-aria\" hidden>3D plot 1<\/p>\n          <div id=\"x3prgl2\" style=\"width:200px;height:600px;\" class=\"rglWebGL html-widget html-widget-output shiny-report-size\" role=\"img\" aria-labelledby=\"x3prgl2-aria\"><\/div>\n        <\/div>\n      <\/div>\n      <script data-bslib-card-init>bslib.Card.initializeAllCards();<\/script>\n    <\/div>\n  <\/div>\n  <div class=\"bslib-grid-item bslib-gap-spacing html-fill-container\">\n    <div class=\"card bslib-card bslib-mb-spacing html-fill-item html-fill-container\" data-bslib-card-init data-require-bs-caller=\"card()\" data-require-bs-version=\"5\" style=\"max-height:600px;\">\n      <div class=\"card-header bg-dark\">Land 3<\/div>\n      <div class=\"card-body bslib-gap-spacing html-fill-item html-fill-container\" style=\"margin-top:auto;margin-bottom:auto;flex:1 1 auto;\">\n        <p id=\"x3prgl3-aria\" hidden>3D plot<\/p>\n        <div class=\"html-fill-item\">\n          <p id=\"x3prgl3-aria\" hidden>3D plot 1<\/p>\n          <div id=\"x3prgl3\" style=\"width:200px;height:600px;\" class=\"rglWebGL html-widget html-widget-output shiny-report-size\" role=\"img\" aria-labelledby=\"x3prgl3-aria\"><\/div>\n        <\/div>\n      <\/div>\n      <script data-bslib-card-init>bslib.Card.initializeAllCards();<\/script>\n    <\/div>\n  <\/div>\n  <div class=\"bslib-grid-item bslib-gap-spacing html-fill-container\">\n    <div class=\"card bslib-card bslib-mb-spacing html-fill-item html-fill-container\" data-bslib-card-init data-require-bs-caller=\"card()\" data-require-bs-version=\"5\" style=\"max-height:600px;\">\n      <div class=\"card-header bg-dark\">Land 4<\/div>\n      <div class=\"card-body bslib-gap-spacing html-fill-item html-fill-container\" style=\"margin-top:auto;margin-bottom:auto;flex:1 1 auto;\">\n        <p id=\"x3prgl4-aria\" hidden>3D plot<\/p>\n        <div class=\"html-fill-item\">\n          <p id=\"x3prgl4-aria\" hidden>3D plot 1<\/p>\n          <div id=\"x3prgl4\" style=\"width:200px;height:600px;\" class=\"rglWebGL html-widget html-widget-output shiny-report-size\" role=\"img\" aria-labelledby=\"x3prgl4-aria\"><\/div>\n        <\/div>\n      <\/div>\n      <script data-bslib-card-init>bslib.Card.initializeAllCards();<\/script>\n    <\/div>\n  <\/div>\n  <div class=\"bslib-grid-item bslib-gap-spacing html-fill-container\">\n    <div class=\"card bslib-card bslib-mb-spacing html-fill-item html-fill-container\" data-bslib-card-init data-require-bs-caller=\"card()\" data-require-bs-version=\"5\" style=\"max-height:600px;\">\n      <div class=\"card-header bg-dark\">Land 5<\/div>\n      <div class=\"card-body bslib-gap-spacing html-fill-item html-fill-container\" style=\"margin-top:auto;margin-bottom:auto;flex:1 1 auto;\">\n        <p id=\"x3prgl5-aria\" hidden>3D plot<\/p>\n        <div class=\"html-fill-item\">\n          <p id=\"x3prgl5-aria\" hidden>3D plot 1<\/p>\n          <div id=\"x3prgl5\" style=\"width:200px;height:600px;\" class=\"rglWebGL html-widget html-widget-output shiny-report-size\" role=\"img\" aria-labelledby=\"x3prgl5-aria\"><\/div>\n        <\/div>\n      <\/div>\n      <script data-bslib-card-init>bslib.Card.initializeAllCards();<\/script>\n    <\/div>\n  <\/div>\n  <div class=\"bslib-grid-item bslib-gap-spacing html-fill-container\">\n    <div class=\"card bslib-card bslib-mb-spacing html-fill-item html-fill-container\" data-bslib-card-init data-require-bs-caller=\"card()\" data-require-bs-version=\"5\" style=\"max-height:600px;\">\n      <div class=\"card-header bg-dark\">Land 6<\/div>\n      <div class=\"card-body bslib-gap-spacing html-fill-item html-fill-container\" style=\"margin-top:auto;margin-bottom:auto;flex:1 1 auto;\">\n        <p id=\"x3prgl6-aria\" hidden>3D plot<\/p>\n        <div class=\"html-fill-item\">\n          <p id=\"x3prgl6-aria\" hidden>3D plot 1<\/p>\n          <div id=\"x3prgl6\" style=\"width:200px;height:600px;\" class=\"rglWebGL html-widget html-widget-output shiny-report-size\" role=\"img\" aria-labelledby=\"x3prgl6-aria\"><\/div>\n        <\/div>\n      <\/div>\n      <script data-bslib-card-init>bslib.Card.initializeAllCards();<\/script>\n    <\/div>\n  <\/div>\n<\/div>",
      "deps": [
        {
          "name": "htmltools-fill",
          "version": "0.5.8.1",
          "src": {
            "href": "htmltools-fill-0.5.8.1"
          },
          "meta": null,
          "script": null,
          "stylesheet": "fill.css",
          "head": null,
          "attachment": null,
          "all_files": true
        },
        {
          "name": "htmlwidgets",
          "version": "1.6.4",
          "src": {
            "href": "htmlwidgets-1.6.4"
          },
          "meta": null,
          "script": "htmlwidgets.js",
          "stylesheet": null,
          "head": null,
          "attachment": null,
          "all_files": true
        },
        {
          "name": "rglWebGL-binding",
          "version": "1.3.24",
          "src": {
            "href": "rglWebGL-binding-1.3.24"
          },
          "meta": null,
          "script": "rglWebGL.js",
          "stylesheet": null,
          "head": null,
          "attachment": null,
          "all_files": false
        },
        {
          "name": "bslib-component-js",
          "version": "0.9.0",
          "src": {
            "href": "bslib-component-js-0.9.0"
          },
          "meta": null,
          "script": [
            {
              "src": "components.min.js"
            },
            {
              "src": "web-components.min.js",
              "type": "module"
            }
          ],
          "stylesheet": null,
          "head": null,
          "attachment": null,
          "all_files": true
        },
        {
          "name": "bslib-component-css",
          "version": "0.9.0",
          "src": {
            "href": "bslib-component-css-0.9.0"
          },
          "meta": null,
          "script": null,
          "stylesheet": "components.css",
          "head": null,
          "attachment": null,
          "all_files": true
        },
        {
          "name": "bslib-tag-require",
          "version": "0.9.0",
          "src": {
            "href": "bslib-tag-require-0.9.0"
          },
          "meta": null,
          "script": "tag-require.js",
          "stylesheet": null,
          "head": null,
          "attachment": null,
          "all_files": true
        }
      ]
    },
    "prevSelUI": {
      "message": "",
      "call": "NULL",
      "type": [
        "shiny.silent.error",
        "validation"
      ]
    },
    "report1-reportDownUI": {
      "message": "",
      "call": "NULL",
      "type": [
        "shiny.silent.error",
        "validation"
      ]
    },
    "reportSelUI": {
      "message": "",
      "call": "NULL",
      "type": [
        "shiny.silent.error",
        "validation"
      ]
    },
    "x3prgl1": {
      "x": {
        "material": {
          "color": "#000000",
          "alpha": 1,
          "lit": true,
          "ambient": "#000000",
          "specular": "#FFFFFF",
          "emission": "#000000",
          "shininess": 50,
          "smooth": true,
          "front": "filled",
          "back": "filled",
          "size": 3,
          "lwd": 1,
          "fog": true,
          "point_antialias": false,
          "line_antialias": false,
          "texture": null,
          "textype": "rgb",
          "texmode": "modulate",
          "texmipmap": false,
          "texminfilter": "linear",
          "texmagfilter": "linear",
          "texenvmap": false,
          "depth_mask": true,
          "depth_test": "less",
          "isTransparent": false,
          "polygon_offset": [
            0,
            0
          ],
          "margin": "",
          "floating": false,
          "tag": "",
          "blend": [
            "src_alpha",
            "one_minus_src_alpha"
          ]
        },
        "rootSubscene": 6,
        "objects": {
          "15": {
            "id": 15,
            "type": "surface",
            "material": {

            },
            "vertices": "0",
            "colors": "2",
            "dim": [
              [
                9,
                31
              ]
            ],
            "centers": "3",
            "normals": "1",
            "ignoreExtent": false,
            "flipped": false,
            "flags": 32771
          },
          "13": {
            "id": 13,
            "type": "light",
            "vertices": [
              [
                -2265.625,
                1250,
                498.4640197753906
              ]
            ],
            "colors": [
              [
                0.1019607856869698,
                0.1019607856869698,
                0.1019607856869698,
                1
              ],
              [
                0.4000000059604645,
                0.4000000059604645,
                0.4000000059604645,
                1
              ],
              [
                0.4000000059604645,
                0.4000000059604645,
                0.4000000059604645,
                1
              ]
            ],
            "viewpoint": true,
            "finite": true
          },
          "14": {
            "id": 14,
            "type": "light",
            "vertices": [
              [
                0,
                0.258819043636322,
                0.9659258127212524
              ]
            ],
            "colors": [
              [
                1,
                1,
                1,
                1
              ],
              [
                0.2000000029802322,
                0.2000000029802322,
                0.2000000029802322,
                1
              ],
              [
                0.2000000029802322,
                0.2000000029802322,
                0.2000000029802322,
                1
              ]
            ],
            "viewpoint": true,
            "finite": false
          },
          "12": {
            "id": 12,
            "type": "background",
            "material": {
              "lit": false,
              "back": "lines"
            },
            "colors": "4",
            "centers": "5",
            "sphere": false,
            "fogtype": "none",
            "fogscale": 1,
            "flags": 32768
          },
          "6": {
            "id": 6,
            "type": "subscene",
            "par3d": {
              "antialias": 4,
              "FOV": 30,
              "ignoreExtent": false,
              "listeners": 6,
              "mouseMode": {
                "none": "none",
                "left": "trackball",
                "right": "zoom",
                "middle": "fov",
                "wheel": "pull"
              },
              "observer": [
                0,
                0,
                5007.466796875
              ],
              "modelMatrix": [
                [
                  1,
                  0,
                  0,
                  -390.625
                ],
                [
                  0,
                  1,
                  0,
                  -1250
                ],
                [
                  0,
                  0,
                  1,
                  -5049.04931640625
                ],
                [
                  0,
                  0,
                  0,
                  1
                ]
              ],
              "projMatrix": [
                [
                  9.330126762390137,
                  0,
                  0,
                  0
                ],
                [
                  0,
                  2.705736875534058,
                  0,
                  0
                ],
                [
                  0,
                  0,
                  -3.863703966140747,
                  -18051.33984375
                ],
                [
                  0,
                  0,
                  -1,
                  0
                ]
              ],
              "skipRedraw": false,
              "userMatrix": [
                [
                  1,
                  0,
                  0,
                  0
                ],
                [
                  0,
                  1,
                  0,
                  0
                ],
                [
                  0,
                  0,
                  1,
                  0
                ],
                [
                  0,
                  0,
                  0,
                  1
                ]
              ],
              "userProjection": [
                [
                  1,
                  0,
                  0,
                  0
                ],
                [
                  0,
                  1,
                  0,
                  0
                ],
                [
                  0,
                  0,
                  1,
                  0
                ],
                [
                  0,
                  0,
                  0,
                  1
                ]
              ],
              "scale": [
                1,
                1,
                1
              ],
              "viewport": {
                "x": 0,
                "y": 0,
                "width": 1,
                "height": 1
              },
              "zoom": 0.4000000059604645,
              "bbox": [
                78.125,
                703.125,
                78.125,
                2421.875,
                -415.2988891601562,
                498.4640197753906
              ],
              "windowRect": [
                0,
                45,
                145,
                545
              ],
              "family": "sans",
              "font": 1,
              "cex": 1,
              "useFreeType": true,
              "fontname": "/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/rgl/fonts/FreeSans.ttf",
              "maxClipPlanes": 6,
              "glVersion": 2.1,
              "activeSubscene": 0
            },
            "embeddings": {
              "viewport": "replace",
              "projection": "replace",
              "model": "replace",
              "mouse": "replace"
            },
            "objects": [
              12,
              15,
              13,
              14
            ],
            "subscenes": [

            ],
            "flags": 33027
          }
        },
        "crosstalk": {
          "key": [

          ],
          "group": [

          ],
          "id": [

          ],
          "options": [

          ]
        },
        "width": 146,
        "height": 501,
        "buffer": {
          "accessors": [
            {
              "bufferView": 0,
              "componentType": 5126,
              "count": 279,
              "type": "VEC3"
            },
            {
              "bufferView": 1,
              "componentType": 5126,
              "count": 279,
              "type": "VEC3"
            },
            {
              "bufferView": 2,
              "componentType": 5126,
              "count": 1,
              "type": "VEC4"
            },
            {
              "bufferView": 3,
              "componentType": 5126,
              "count": 240,
              "type": "VEC3"
            },
            {
              "bufferView": 4,
              "componentType": 5121,
              "count": 1,
              "type": "VEC4"
            },
            {
              "bufferView": 5,
              "componentType": 5121,
              "count": 1,
              "type": "VEC3"
            }
          ],
          "bufferViews": [
            {
              "buffer": 0,
              "byteLength": 3348,
              "byteOffset": 0
            },
            {
              "buffer": 0,
              "byteLength": 3348,
              "byteOffset": 3348
            },
            {
              "buffer": 0,
              "byteLength": 16,
              "byteOffset": 6696
            },
            {
              "buffer": 0,
              "byteLength": 2880,
              "byteOffset": 6712
            },
            {
              "buffer": 0,
              "byteLength": 4,
              "byteOffset": 9592
            },
            {
              "buffer": 0,
              "byteLength": 3,
              "byteOffset": 9596
            }
          ],
          "buffers": [
            {
              "byteLength": 9599,
              "bytes": "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\nqSkJPgsvo77dNnA/NhI2Prvpp77zhG0/+tRwPpmiqb6m6mk/WxOAPgCHoL5zgWo/HbCEPvj9\nmL5/H2s/WxyDPuwsmr6lJms/4RF+PsqTn74hz2o/F8J/Pt+Epr5afGk/iYp+PhVGqr4f5Gg/\nwTg3PpV+pb5b420/oZpVPmhJrb7+5Wo/dPtyPg4aub5G02Y/w/J2Ptaywb4symQ/u0SCPkEu\nyL7acGI/Anp8Pk6Myb5GtWI/AHKCPihsy74gsWE/brGFPspj1b4D5l4/QhN5Ptnm3L7uZF4/\ndp5WPrJ0175V8mE/PvJkPomT2b4tjmA/64t3Pntb3b4/Y14/wGB/Pl/u4b6CrVw/jeGDPiuF\n5r4Q3lo/6odyPtHN6r5vQ1s/6SuFPmxd7L5FG1k/hZ+LPhmg7770MFc/w0BxPgG387506Fg/\nRn5QPkoq/r7PB1g/Q/lgPlhB/b5OQ1c/PlJ3PqDW/b5cjVU/MGl9PsG9/741iVQ/sCKBPgGE\n/r7DiVQ/t7FqPtbu/L5TtVY/zQSCPl3d9b6T71Y/jhaRPrqz8r4Ia1U//D6EPsmj9r6WX1Y/\nJihFPolnG79xX0U/fUBUPs0uHL8DxkM/jtRmPlO5Hb8INUE/R3BoPsxdH7+0uz8/LK9pPrLk\nIL+/Wz4/qB1QPiSpIr/itT4/j9pbPpOIIb9q2D4/OyyEPjbnH7+vrTw/MNGGPovJIL+WdDs/\nv1dGPtBAMb+27TE/dNNLPqsYMb+AsjE/QQBUPmOQML8QoTE/jERaPrgkML+HkjE/yxJgPjn6\nL7/lSDE/V5ZQPrC2Mb+ruzA/gq1RPh8fNL9PMi4/DZFoPipUM78YMi0/ZvttPmb6Mb9rIC4/\n5idVPvQvJr+ZSjs/3zdWPq3aJb/Dgjs/SYJdPp5eJb/JaDs/pWxmPsY3Jb/a3jo/IaBsPpow\nJb8PaTo/q95qPusTJr9Swjk/sNxtPnBhJ7+qWDg/r7huPkZ6KL9GRjc/rxtnPoMwKb+HOjc/\nXpFAPjPjK7+NgDc/LqlSPjfnK7+fPTY/Y+JfPrNiLb/O1TM/ODJcPmiuLr/+3DI/EBJiPt4l\nLr/f7DI/W2BnPmgBLr/EozI/x6tkPnBBLb91lTM/gjFrPnOTK7+qqjQ/Ez91PvjKKr/AkjQ/\nuNNIPklf7b7hMl0/SX9zPiEp5L6E8Vw/NhOGPsSSy74bIGE/1eJ7PqMtr744KWg/g8aBPiIc\nlL7WTmw/vviDPsWzbL65KnA/keO3Pf+fIr4gtHs/PmwDPlC2tr5u4Gw/h72rPipkbb6YwGk/\nBlY6PhLT1L7AIGQ/U1k2ProIu74g6Gk/hL47PkGkd74t7XM/cCBDPmXV9L1XcHk/Bu08Pvqb\ndLyBk3s/+Js3PiWPtT2U03o/2uqNu5enFz6sLH0/pRvevjVwsz2KkGU/AAAAAAAAAAAAAAAA\n3mwSPqE/H792EUU/cBO0PXf2EL8+zFE/adXKPb4U5L4JymM/FzAFPrzgsb7Bu20/aYb+PaRY\nf7713HU/WzsCPqmfHL5Q4no/WGcmvlj8wL7IcGk/6kxWvlYwB79JsFI/WYASPpHcZb9tJtU+\nzs1NP//+/j7JyEg+AACAPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAnEMA7RRFaU/Ow1ZF\nqUOrHBRFsNHNwwDY1kMAfBJFEqbMwwBg6kMAfBJF5nXMwwAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAABg6kIAmg1FfangwgBQQ0MAmg1FeSMCw6s6j0OrOg9F/oNuwwDIr0MACxBFZQySwwDY\n1kMACxBFIP6Ww1Zl90OrOg9F6bSOwwB8EkQAmg1FI2OgwwBAHEQAmg1FJYTJwwBg6kIAKQtF\nZYHRwgBQQ0MAKQtF/FzwwgC4iEMAKQtFzkQNwwDIr0MAKQtFhDw/wwDY1kMAKQtFK2JjwwDo\n/UMAKQtF1sCKwwB8EkQAKQtFbBa0wwBAHEQAKQtFprjEwwBg6kIARwZFrBpEwwBQQ0MARwZF\nEu9NwwC4iEMARwZFRMNbwwDIr0MARwZFCSeDwwDY1kMARwZFuquRwwDo/UMARwZFarWlwwB8\nEkQARwZFNri4wwBAHEQARwZFWJq1wwBg6kIAZQFFcsV3wwBQQ0MAZQFF1AF/wwC4iEMAZQFF\n/NSCwwDIr0MAZQFFPY+GwwDY1kMAZQFF1P6KwwDo/UMAZQFFZbmPwwB8EkQAZQFFjL6TwwBA\nHEQAZQFFjkyVwwBg6kIABvlEkzMgwwBQQ0MABvlEdFwnwwC4iEMABvlEITQwwwDIr0MABvlE\nE+Y4wwDY1kMABvlEvThCwwDo/UMABvlE0ZUnwwB8EkQABvlE3KQxw6vCIkRWZfdEYHlxwwBg\n6kIAQu9Ez8OjwgBQQ0MAQu9ENLCywgC4iEMAQu9E0ODFwgDIr0MAQu9Ewt7WwgDY1kMAQu9E\nqtTowgDo/UMAQu9EOhirwQB8EkQAQu9EMkv/wQAEJkQAQu9E2nI8wwBg6kIAfuVEpu/dwABQ\nQ0MAfuVEcCKCwQC4iEMAfuVEtojLwQDIr0MAfuVE77IKwgDY1kMAfuVEwCE2wgDo/UMAfuVE\nqoepQgB8EkQAfuVErFOUQgAEJkQAfuVEUJnbwgBg6kIAuttE0sBkQgBQQ0MAuttEzh87QgC4\niEMAuttEqhAQQgDIr0MAuttE/6XEQQDY1kMAuttEy8EyQQDo/UMAuttER8iPQgB8EkQAuttE\n0fhoQgAEJkQAuttEAxg0wgBg6kIA9tFEvLvQQgBQQ0MA9tFEMom6QgC4iEMA9tFECtegQgDI\nr0MA9tFEkaGGQgDY1kMA9tFEcghYQgDo/UMA9tFES/YjQgB8EkQA9tFE5mfKQQAEJkQA9tFE\nLdkKQABg6kIAMshEaUMaQwBQQ0MAMshEIpIPQwC4iEMAMshErk4FQwDIr0MAMshEDib2QgDY\n1kMAMshE6v7fQgDo/UMAMshERm3IQgB8EkQAMshEvkWsQgAEJkQAMshEXmgGQgBg6kIAbr5E\nBWhKQwBQQ0MAbr5Eq1BFQwC4iEMAbr5E/OxCQwDIr0MAbr5EFqM6QwDY1kMAbr5ExhcuQwDo\n/UMAbr5EaskhQwB8EkQAbr5EfgETQwAEJkQAbr5EwYW6QgBg6kIAqrREuqVnQwBQQ0MAqrRE\ntr9hQwC4iEMAqrRE5YxaQwDIr0MAqrRESklNQwDY1kMAqrREzIA9QwDo/UMAqrREZY8tQwB8\nEkQAqrREiBwbQwAEJkQAqrREeEcDQwBg6kIA5qpEMz59QwBQQ0MA5qpEAKN1QwC4iEMA5qpE\nmcdoQwDIr0MA5qpEPz5YQwDY1kMA5qpEk4NGQwDo/UMA5qpEnuwzQwB8EkQA5qpEMd1zQwAE\nJkQA5qpEv1llQwBg6kIAIqFEkzqGQwBQQ0MAIqFEjPaDQwC4iEMAIqFEZPqBQwDIr0MAIqFE\nxkp4QwDY1kMAIqFE6itlQwDo/UMAIqFEdUZRQwB8EkQAIqFEcemHQwAEJkQAIqFEciuBQwBg\n6kIAXpdEWsqJQwBQQ0MAXpdEAZGGQwC4iEMAXpdENESGQwDIr0MAXpdEik+CQwDY1kMAXpdE\nBdNwQwDo/UMAXpdEDjJcQwB8EkQAXpdECphGQwAEJkQAXpdEOn4zQwBg6kIAmo1EUfOKQwBQ\nQ0MAmo1ETWGFQwC4iEMAmo1Esih/QwDIr0MAmo1EQiFxQwDY1kMAmo1EgNlcQwDo/UMAmo1E\nJjRHQwB8EkQAmo1El+8yQwAEJkQAmo1EmsUeQwBg6kIA1oNEZHyIQwBQQ0MA1oNEER6DQwC4\niEMA1oNErw50QwDIr0MA1oNEzgJgQwDY1kMA1oNEkgRMQwDo/UMA1oNEOjk3QwB8EkQA1oNE\nTaUlQwAEJkQA1oNE+DsTQwBg6kIAJHRETFuCQwBQQ0MAJHREbYJ6QwC4iEMAJHREg9FnQwDI\nr0MAJHREhPhQQwDY1kMAJHREqyQ8QwDo/UMAJHREIikoQwB8EkQAJHREU18WQwAEJkQAJHRE\nBdQDQwBg6kIAnGBEemdwQwBQQ0MAnGBE5HdiQwC4iEMAnGBEnvBNQwDIr0MAnGBElHE3QwDY\n1kMAnGBEGUIhQwDo/UMAnGBEIsMLQwB8EkQAnGBEJH/uQgAEJkQAnGBEcg/FQgBg6kIAFE1E\nwNlVQwBQQ0MAFE1EkLFFQwC4iEMAFE1EIvcxQwDIr0MAFE1EWtAdQwDY1kMAFE1EdecHQwDo\n/UMAFE1E6aTjQgB8EkQAFE1Esxy4QgAEJkQAFE1EkuuLQgBg6kIAjDlEbqU6QwBQQ0MAjDlE\nNzEnQwC4iEMAjDlEZcwRQwDIr0MAjDlEyXn3QgDY1kMAjDlESE/JQgDo/UMAjDlErHKeQgB8\nEkQAjDlEzrteQgAEJkQAjDlEiOb1QQBg6kIABCZEL8oUQwBQQ0MABCZEqVoAQwC4iEMABCZE\n92zUQgDIr0MABCZEowqmQgDY1kMABCZEvP5rQgDo/UMABCZEG7kUQgB8EkQABCZEzcxIQQAE\nJkQABCZE1EZUwQBg6kIAfBJEDpHNQgBQQ0MAfBJEP8OkQgC4iEMAfBJE+BhtQgDIr0MAfBJE\nr3kPQgDY1kMAfBJE8NdGQQDo/UMAfBJEBcYHwQB8EkQAfBJEcP/5wQAEJkQAfBJEbHNqwgBg\n6kIA6P1Dv2saQgBQQ0MA6P1DH+aCQQC4iEMA6P1DzDjpwADIr0MA6P1D83z6wQDY1kMA6P1D\nW9NfwgDo/UMA6P1DaJ6bwgB8EkQA6P1DaB7IwgAEJkQA6P1DeC3/wgBg6kIA2NZDtC8ewgBQ\nQ0MA2NZDQmB4wgC4iEMA2NZDFzyqwgDIr0MA2NZDxj7awgDY1kMA2NZD5tgFwwDo/UMA2NZD\ndQIewwB8EkQA2NZDaqk2wwAEJkQA2NZD+cVPwwBg6kIAyK9DwMrZwgBQQ0MAyK9D1voCwwC4\niEMAyK9DYSQawwDIr0MAyK9DvE4ywwDY1kMAyK9DMCtLwwDo/UMAyK9D/mVkwwB8EkQAyK9D\nGCt+wwAEJkQAyK9D8vaLwwBg6kIAuIhDTk42wwBQQ0MAuIhDUHlNwwC4iEMAuIhD5x1nwwDI\nr0MAuIhDFQd/wwDY1kMAuIhDeMCLwwDo/UMAuIhD2HCYwwB8EkQAuIhD0mWkwwAEJkQAuIhD\ndvawwwBg6kIAUENDnHhlwwBQQ0MAUENDJvx5wwC4iEMAUENDL+OHwwDIr0MAUENDR5aRwwDY\n1kMAUENDmkibwwDo/UMAUENDOqykwwB8EkQAUENDjjKaw6vCIkRWVVBDOMigwwBg6kIAYOpC\nYFCGwwBQQ0MAYOpC1N6KwwC4iEMAYOpCtvGOwwDIr0MAYOpCRnmUwwDY1kMAYOpCXYaZwwDo\n/UMAYOpC/5eewwB8EkQAYOpCC2qSw6vCIkRWVdBCM2GWwwEBAQEAAAA="
            }
          ]
        },
        "context": {
          "shiny": true,
          "rmarkdown": null
        },
        "vertexShader": "#line 2 1\n// File 1 is the vertex shader\n#ifdef GL_ES\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#endif\n\nattribute vec3 aPos;\nattribute vec4 aCol;\nuniform mat4 mvMatrix;\nuniform mat4 prMatrix;\nvarying vec4 vCol;\nvarying vec4 vPosition;\n\n#ifdef NEEDS_VNORMAL\nattribute vec3 aNorm;\nuniform mat4 normMatrix;\nvarying vec4 vNormal;\n#endif\n\n#if defined(HAS_TEXTURE) || defined (IS_TEXT)\nattribute vec2 aTexcoord;\nvarying vec2 vTexcoord;\n#endif\n\n#ifdef FIXED_SIZE\nuniform vec3 textScale;\n#endif\n\n#ifdef FIXED_QUADS\nattribute vec3 aOfs;\n#endif\n\n#ifdef IS_TWOSIDED\n#ifdef HAS_NORMALS\nvarying float normz;\nuniform mat4 invPrMatrix;\n#else\nattribute vec3 aPos1;\nattribute vec3 aPos2;\nvarying float normz;\n#endif\n#endif // IS_TWOSIDED\n\n#ifdef FAT_LINES\nattribute vec3 aNext;\nattribute vec2 aPoint;\nvarying vec2 vPoint;\nvarying float vLength;\nuniform float uAspect;\nuniform float uLwd;\n#endif\n\n#ifdef USE_ENVMAP\nvarying vec3 vReflection;\n#endif\n\nvoid main(void) {\n  \n#ifndef IS_BRUSH\n#if defined(NCLIPPLANES) || !defined(FIXED_QUADS) || defined(HAS_FOG) || defined(USE_ENVMAP)\n  vPosition = mvMatrix * vec4(aPos, 1.);\n#endif\n  \n#ifndef FIXED_QUADS\n  gl_Position = prMatrix * vPosition;\n#endif\n#endif // !IS_BRUSH\n  \n#ifdef IS_POINTS\n  gl_PointSize = POINTSIZE;\n#endif\n  \n  vCol = aCol;\n  \n// USE_ENVMAP implies NEEDS_VNORMAL\n\n#ifdef NEEDS_VNORMAL\n  vNormal = normMatrix * vec4(-aNorm, dot(aNorm, aPos));\n#endif\n\n#ifdef USE_ENVMAP\n  vReflection = normalize(reflect(vPosition.xyz/vPosition.w, \n                        normalize(vNormal.xyz/vNormal.w)));\n#endif\n  \n#ifdef IS_TWOSIDED\n#ifdef HAS_NORMALS\n  /* normz should be calculated *after* projection */\n  normz = (invPrMatrix*vNormal).z;\n#else\n  vec4 pos1 = prMatrix*(mvMatrix*vec4(aPos1, 1.));\n  pos1 = pos1/pos1.w - gl_Position/gl_Position.w;\n  vec4 pos2 = prMatrix*(mvMatrix*vec4(aPos2, 1.));\n  pos2 = pos2/pos2.w - gl_Position/gl_Position.w;\n  normz = pos1.x*pos2.y - pos1.y*pos2.x;\n#endif\n#endif // IS_TWOSIDED\n  \n#ifdef NEEDS_VNORMAL\n  vNormal = vec4(normalize(vNormal.xyz), 1);\n#endif\n  \n#if defined(HAS_TEXTURE) || defined(IS_TEXT)\n  vTexcoord = aTexcoord;\n#endif\n  \n#if defined(FIXED_SIZE) && !defined(ROTATING)\n  vec4 pos = prMatrix * mvMatrix * vec4(aPos, 1.);\n  pos = pos/pos.w;\n  gl_Position = pos + vec4(aOfs*textScale, 0.);\n#endif\n  \n#if defined(IS_SPRITES) && !defined(FIXED_SIZE)\n  vec4 pos = mvMatrix * vec4(aPos, 1.);\n  pos = pos/pos.w + vec4(aOfs,  0.);\n  gl_Position = prMatrix*pos;\n#endif\n  \n#ifdef FAT_LINES\n  /* This code was inspired by Matt Deslauriers' code in \n   https://mattdesl.svbtle.com/drawing-lines-is-hard */\n  vec2 aspectVec = vec2(uAspect, 1.0);\n  mat4 projViewModel = prMatrix * mvMatrix;\n  vec4 currentProjected = projViewModel * vec4(aPos, 1.0);\n  currentProjected = currentProjected/currentProjected.w;\n  vec4 nextProjected = projViewModel * vec4(aNext, 1.0);\n  vec2 currentScreen = currentProjected.xy * aspectVec;\n  vec2 nextScreen = (nextProjected.xy / nextProjected.w) * aspectVec;\n  float len = uLwd;\n  vec2 dir = vec2(1.0, 0.0);\n  vPoint = aPoint;\n  vLength = length(nextScreen - currentScreen)/2.0;\n  vLength = vLength/(vLength + len);\n  if (vLength > 0.0) {\n    dir = normalize(nextScreen - currentScreen);\n  }\n  vec2 normal = vec2(-dir.y, dir.x);\n  dir.x /= uAspect;\n  normal.x /= uAspect;\n  vec4 offset = vec4(len*(normal*aPoint.x*aPoint.y - dir), 0.0, 0.0);\n  gl_Position = currentProjected + offset;\n#endif\n  \n#ifdef IS_BRUSH\n  gl_Position = vec4(aPos, 1.);\n#endif\n}",
        "fragmentShader": "#line 2 2\n// File 2 is the fragment shader\n#ifdef GL_ES\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#endif\nvarying vec4 vCol; // carries alpha\nvarying vec4 vPosition;\n#if defined(HAS_TEXTURE) || defined (IS_TEXT)\nvarying vec2 vTexcoord;\nuniform sampler2D uSampler;\n#endif\n\n#ifdef HAS_FOG\nuniform int uFogMode;\nuniform vec3 uFogColor;\nuniform vec4 uFogParms;\n#endif\n\n#if defined(IS_LIT) && !defined(FIXED_QUADS)\nvarying vec4 vNormal;\n#endif\n\n#if NCLIPPLANES > 0\nuniform vec4 vClipplane[NCLIPPLANES];\n#endif\n\n#if NLIGHTS > 0\nuniform mat4 mvMatrix;\n#endif\n\n#ifdef IS_LIT\nuniform vec3 emission;\nuniform float shininess;\n#if NLIGHTS > 0\nuniform vec3 ambient[NLIGHTS];\nuniform vec3 specular[NLIGHTS]; // light*material\nuniform vec3 diffuse[NLIGHTS];\nuniform vec3 lightDir[NLIGHTS];\nuniform bool viewpoint[NLIGHTS];\nuniform bool finite[NLIGHTS];\n#endif\n#endif // IS_LIT\n\n#ifdef IS_TWOSIDED\nuniform bool front;\nvarying float normz;\n#endif\n\n#ifdef FAT_LINES\nvarying vec2 vPoint;\nvarying float vLength;\n#endif\n\n#ifdef USE_ENVMAP\nvarying vec3 vReflection;\n#endif\n\nvoid main(void) {\n  vec4 fragColor;\n#ifdef FAT_LINES\n  vec2 point = vPoint;\n  bool neg = point.y < 0.0;\n  point.y = neg ? (point.y + vLength)/(1.0 - vLength) :\n                 -(point.y - vLength)/(1.0 - vLength);\n#if defined(IS_TRANSPARENT) && defined(IS_LINESTRIP)\n  if (neg && length(point) <= 1.0) discard;\n#endif\n  point.y = min(point.y, 0.0);\n  if (length(point) > 1.0) discard;\n#endif // FAT_LINES\n  \n#ifdef ROUND_POINTS\n  vec2 coord = gl_PointCoord - vec2(0.5);\n  if (length(coord) > 0.5) discard;\n#endif\n  \n#if NCLIPPLANES > 0\n  for (int i = 0; i < NCLIPPLANES; i++)\n    if (dot(vPosition, vClipplane[i]) < 0.0) discard;\n#endif\n    \n#ifdef FIXED_QUADS\n    vec3 n = vec3(0., 0., 1.);\n#elif defined(IS_LIT)\n    vec3 n = normalize(vNormal.xyz);\n#endif\n    \n#ifdef IS_TWOSIDED\n    if ((normz <= 0.) != front) discard;\n#endif\n\n#ifdef IS_LIT\n    vec3 eye = normalize(-vPosition.xyz/vPosition.w);\n    vec3 lightdir;\n    vec4 colDiff;\n    vec3 halfVec;\n    vec4 lighteffect = vec4(emission, 0.);\n    vec3 col;\n    float nDotL;\n#ifdef FIXED_QUADS\n    n = -faceforward(n, n, eye);\n#endif\n    \n#if NLIGHTS > 0\n    // Simulate two-sided lighting\n    if (n.z < 0.0)\n      n = -n;\n    for (int i=0;i<NLIGHTS;i++) {\n      colDiff = vec4(vCol.rgb * diffuse[i], vCol.a);\n      lightdir = lightDir[i];\n      if (!viewpoint[i]) {\n        if (finite[i]) {\n          lightdir = (mvMatrix * vec4(lightdir, 1.)).xyz;\n        } else {\n          lightdir = (mvMatrix * vec4(lightdir, 0.)).xyz;\n        }\n      }\n      if (!finite[i]) {\n        halfVec = normalize(lightdir + eye);\n      } else {\n        lightdir = normalize(lightdir - vPosition.xyz/vPosition.w);\n        halfVec = normalize(lightdir + eye);\n      }\n      col = ambient[i];\n      nDotL = dot(n, lightdir);\n      col = col + max(nDotL, 0.) * colDiff.rgb;\n      col = col + pow(max(dot(halfVec, n), 0.), shininess) * specular[i];\n      lighteffect = lighteffect + vec4(col, colDiff.a);\n    }\n#endif\n    \n#else // not IS_LIT\n    vec4 colDiff = vCol;\n    vec4 lighteffect = colDiff;\n#endif\n    \n#ifdef IS_TEXT\n    vec4 textureColor = lighteffect*texture2D(uSampler, vTexcoord);\n#endif\n    \n#ifdef HAS_TEXTURE\n\n// These calculations use the definitions from \n// https://docs.gl/gl3/glTexEnv\n\n#ifdef USE_ENVMAP\n    float m = 2.0 * sqrt(dot(vReflection, vReflection) + 2.0*vReflection.z + 1.0);\n    vec4 textureColor = texture2D(uSampler, vReflection.xy / m + vec2(0.5, 0.5));\n#else\n    vec4 textureColor = texture2D(uSampler, vTexcoord);\n#endif\n\n#ifdef TEXTURE_rgb\n\n#if defined(TEXMODE_replace) || defined(TEXMODE_decal)\n    textureColor = vec4(textureColor.rgb, lighteffect.a);\n#endif \n\n#ifdef TEXMODE_modulate\n    textureColor = lighteffect*vec4(textureColor.rgb, 1.);\n#endif\n\n#ifdef TEXMODE_blend\n    textureColor = vec4((1. - textureColor.rgb) * lighteffect.rgb, lighteffect.a);\n#endif\n\n#ifdef TEXMODE_add\n    textureColor = vec4(lighteffect.rgb + textureColor.rgb, lighteffect.a);\n#endif\n\n#endif //TEXTURE_rgb\n        \n#ifdef TEXTURE_rgba\n\n#ifdef TEXMODE_replace\n// already done\n#endif \n\n#ifdef TEXMODE_modulate\n    textureColor = lighteffect*textureColor;\n#endif\n\n#ifdef TEXMODE_decal\n    textureColor = vec4((1. - textureColor.a)*lighteffect.rgb) +\n                     textureColor.a*textureColor.rgb, \n                     lighteffect.a);\n#endif\n\n#ifdef TEXMODE_blend\n    textureColor = vec4((1. - textureColor.rgb) * lighteffect.rgb,\n                    lighteffect.a*textureColor.a);\n#endif\n\n#ifdef TEXMODE_add\n    textureColor = vec4(lighteffect.rgb + textureColor.rgb,\n                    lighteffect.a*textureColor.a);\n#endif\n    \n#endif //TEXTURE_rgba\n    \n#ifdef TEXTURE_alpha\n    float luminance = dot(vec3(1.,1.,1.),textureColor.rgb)/3.;\n\n#if defined(TEXMODE_replace) || defined(TEXMODE_decal)\n    textureColor = vec4(lighteffect.rgb, luminance);\n#endif \n\n#if defined(TEXMODE_modulate) || defined(TEXMODE_blend) || defined(TEXMODE_add)\n    textureColor = vec4(lighteffect.rgb, lighteffect.a*luminance);\n#endif\n \n#endif // TEXTURE_alpha\n    \n// The TEXTURE_luminance values are not from that reference    \n#ifdef TEXTURE_luminance\n    float luminance = dot(vec3(1.,1.,1.),textureColor.rgb)/3.;\n\n#if defined(TEXMODE_replace) || defined(TEXMODE_decal)\n    textureColor = vec4(luminance, luminance, luminance, lighteffect.a);\n#endif \n\n#ifdef TEXMODE_modulate\n    textureColor = vec4(luminance*lighteffect.rgb, lighteffect.a);\n#endif\n\n#ifdef TEXMODE_blend\n    textureColor = vec4((1. - luminance)*lighteffect.rgb,\n                        lighteffect.a);\n#endif\n\n#ifdef TEXMODE_add\n    textureColor = vec4(luminance + lighteffect.rgb, lighteffect.a);\n#endif\n\n#endif // TEXTURE_luminance\n \n    \n#ifdef TEXTURE_luminance_alpha\n    float luminance = dot(vec3(1.,1.,1.),textureColor.rgb)/3.;\n\n#if defined(TEXMODE_replace) || defined(TEXMODE_decal)\n    textureColor = vec4(luminance, luminance, luminance, textureColor.a);\n#endif \n\n#ifdef TEXMODE_modulate\n    textureColor = vec4(luminance*lighteffect.rgb, \n                        textureColor.a*lighteffect.a);\n#endif\n\n#ifdef TEXMODE_blend\n    textureColor = vec4((1. - luminance)*lighteffect.rgb,\n                        textureColor.a*lighteffect.a);\n#endif\n\n#ifdef TEXMODE_add\n    textureColor = vec4(luminance + lighteffect.rgb, \n                        textureColor.a*lighteffect.a);\n\n#endif\n\n#endif // TEXTURE_luminance_alpha\n    \n    fragColor = textureColor;\n\n#elif defined(IS_TEXT)\n    if (textureColor.a < 0.1)\n      discard;\n    else\n      fragColor = textureColor;\n#else\n    fragColor = lighteffect;\n#endif // HAS_TEXTURE\n    \n#ifdef HAS_FOG\n    // uFogParms elements: x = near, y = far, z = fogscale, w = (1-sin(FOV/2))/(1+sin(FOV/2))\n    // In Exp and Exp2: use density = density/far\n    // fogF will be the proportion of fog\n    // Initialize it to the linear value\n    float fogF;\n    if (uFogMode > 0) {\n      fogF = (uFogParms.y - vPosition.z/vPosition.w)/(uFogParms.y - uFogParms.x);\n      if (uFogMode > 1)\n        fogF = mix(uFogParms.w, 1.0, fogF);\n      fogF = fogF*uFogParms.z;\n      if (uFogMode == 2)\n        fogF = 1.0 - exp(-fogF);\n      // Docs are wrong: use (density*c)^2, not density*c^2\n      // https://gitlab.freedesktop.org/mesa/mesa/-/blob/master/src/mesa/swrast/s_fog.c#L58\n      else if (uFogMode == 3)\n        fogF = 1.0 - exp(-fogF*fogF);\n      fogF = clamp(fogF, 0.0, 1.0);\n      gl_FragColor = vec4(mix(fragColor.rgb, uFogColor, fogF), fragColor.a);\n    } else gl_FragColor = fragColor;\n#else\n    gl_FragColor = fragColor;\n#endif // HAS_FOG\n    \n}",
        "players": [

        ],
        "webGLoptions": {
          "preserveDrawingBuffer": true
        },
        "fastTransparency": true,
        "altText": "3D plot"
      },
      "evals": [

      ],
      "jsHooks": [

      ],
      "deps": [
        {
          "name": "rglwidgetClass",
          "version": "1.3.24",
          "src": {
            "href": "rglwidgetClass-1.3.24"
          },
          "meta": null,
          "script": "rglClass.min.js",
          "stylesheet": "rgl.css",
          "head": null,
          "attachment": null,
          "all_files": false
        },
        {
          "name": "CanvasMatrix4",
          "version": "1.3.24",
          "src": {
            "href": "CanvasMatrix4-1.3.24"
          },
          "meta": null,
          "script": "CanvasMatrix.min.js",
          "stylesheet": null,
          "head": null,
          "attachment": null,
          "all_files": false
        }
      ]
    },
    "x3prgl2": {
      "x": {
        "material": {
          "color": "#000000",
          "alpha": 1,
          "lit": true,
          "ambient": "#000000",
          "specular": "#FFFFFF",
          "emission": "#000000",
          "shininess": 50,
          "smooth": true,
          "front": "filled",
          "back": "filled",
          "size": 3,
          "lwd": 1,
          "fog": true,
          "point_antialias": false,
          "line_antialias": false,
          "texture": null,
          "textype": "rgb",
          "texmode": "modulate",
          "texmipmap": false,
          "texminfilter": "linear",
          "texmagfilter": "linear",
          "texenvmap": false,
          "depth_mask": true,
          "depth_test": "less",
          "isTransparent": false,
          "polygon_offset": [
            0,
            0
          ],
          "margin": "",
          "floating": false,
          "tag": "",
          "blend": [
            "src_alpha",
            "one_minus_src_alpha"
          ]
        },
        "rootSubscene": 16,
        "objects": {
          "25": {
            "id": 25,
            "type": "surface",
            "material": {

            },
            "vertices": "0",
            "colors": "2",
            "dim": [
              [
                9,
                31
              ]
            ],
            "centers": "3",
            "normals": "1",
            "ignoreExtent": false,
            "flipped": false,
            "flags": 32771
          },
          "23": {
            "id": 23,
            "type": "light",
            "vertices": [
              [
                -2265.625,
                1250,
                248.5069885253906
              ]
            ],
            "colors": [
              [
                0.1019607856869698,
                0.1019607856869698,
                0.1019607856869698,
                1
              ],
              [
                0.4000000059604645,
                0.4000000059604645,
                0.4000000059604645,
                1
              ],
              [
                0.4000000059604645,
                0.4000000059604645,
                0.4000000059604645,
                1
              ]
            ],
            "viewpoint": true,
            "finite": true
          },
          "24": {
            "id": 24,
            "type": "light",
            "vertices": [
              [
                0,
                0.258819043636322,
                0.9659258127212524
              ]
            ],
            "colors": [
              [
                1,
                1,
                1,
                1
              ],
              [
                0.2000000029802322,
                0.2000000029802322,
                0.2000000029802322,
                1
              ],
              [
                0.2000000029802322,
                0.2000000029802322,
                0.2000000029802322,
                1
              ]
            ],
            "viewpoint": true,
            "finite": false
          },
          "22": {
            "id": 22,
            "type": "background",
            "material": {
              "lit": false,
              "back": "lines"
            },
            "colors": "4",
            "centers": "5",
            "sphere": false,
            "fogtype": "none",
            "fogscale": 1,
            "flags": 32768
          },
          "16": {
            "id": 16,
            "type": "subscene",
            "par3d": {
              "antialias": 4,
              "FOV": 30,
              "ignoreExtent": false,
              "listeners": 16,
              "mouseMode": {
                "none": "none",
                "left": "trackball",
                "right": "zoom",
                "middle": "fov",
                "wheel": "pull"
              },
              "observer": [
                0,
                0,
                4866.3134765625
              ],
              "modelMatrix": [
                [
                  1,
                  0,
                  0,
                  -390.625
                ],
                [
                  0,
                  1,
                  0,
                  -1250
                ],
                [
                  0,
                  0,
                  1,
                  -4775.14501953125
                ],
                [
                  0,
                  0,
                  0,
                  1
                ]
              ],
              "projMatrix": [
                [
                  9.330126762390137,
                  0,
                  0,
                  0
                ],
                [
                  0,
                  2.705736875534058,
                  0,
                  0
                ],
                [
                  0,
                  0,
                  -3.86370325088501,
                  -17542.49609375
                ],
                [
                  0,
                  0,
                  -1,
                  0
                ]
              ],
              "skipRedraw": false,
              "userMatrix": [
                [
                  1,
                  0,
                  0,
                  0
                ],
                [
                  0,
                  1,
                  0,
                  0
                ],
                [
                  0,
                  0,
                  1,
                  0
                ],
                [
                  0,
                  0,
                  0,
                  1
                ]
              ],
              "userProjection": [
                [
                  1,
                  0,
                  0,
                  0
                ],
                [
                  0,
                  1,
                  0,
                  0
                ],
                [
                  0,
                  0,
                  1,
                  0
                ],
                [
                  0,
                  0,
                  0,
                  1
                ]
              ],
              "scale": [
                1,
                1,
                1
              ],
              "viewport": {
                "x": 0,
                "y": 0,
                "width": 1,
                "height": 1
              },
              "zoom": 0.4000000059604645,
              "bbox": [
                78.125,
                703.125,
                78.125,
                2421.875,
                -430.8441467285156,
                248.5069885253906
              ],
              "windowRect": [
                20,
                65,
                165,
                565
              ],
              "family": "sans",
              "font": 1,
              "cex": 1,
              "useFreeType": true,
              "fontname": "/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/rgl/fonts/FreeSans.ttf",
              "maxClipPlanes": 6,
              "glVersion": 2.1,
              "activeSubscene": 0
            },
            "embeddings": {
              "viewport": "replace",
              "projection": "replace",
              "model": "replace",
              "mouse": "replace"
            },
            "objects": [
              22,
              25,
              23,
              24
            ],
            "subscenes": [

            ],
            "flags": 33027
          }
        },
        "crosstalk": {
          "key": [

          ],
          "group": [

          ],
          "id": [

          ],
          "options": [

          ]
        },
        "width": 146,
        "height": 501,
        "buffer": {
          "accessors": [
            {
              "bufferView": 0,
              "componentType": 5126,
              "count": 279,
              "type": "VEC3"
            },
            {
              "bufferView": 1,
              "componentType": 5126,
              "count": 279,
              "type": "VEC3"
            },
            {
              "bufferView": 2,
              "componentType": 5126,
              "count": 1,
              "type": "VEC4"
            },
            {
              "bufferView": 3,
              "componentType": 5126,
              "count": 240,
              "type": "VEC3"
            },
            {
              "bufferView": 4,
              "componentType": 5121,
              "count": 1,
              "type": "VEC4"
            },
            {
              "bufferView": 5,
              "componentType": 5121,
              "count": 1,
              "type": "VEC3"
            }
          ],
          "bufferViews": [
            {
              "buffer": 0,
              "byteLength": 3348,
              "byteOffset": 0
            },
            {
              "buffer": 0,
              "byteLength": 3348,
              "byteOffset": 3348
            },
            {
              "buffer": 0,
              "byteLength": 16,
              "byteOffset": 6696
            },
            {
              "buffer": 0,
              "byteLength": 2880,
              "byteOffset": 6712
            },
            {
              "buffer": 0,
              "byteLength": 4,
              "byteOffset": 9592
            },
            {
              "buffer": 0,
              "byteLength": 3,
              "byteOffset": 9596
            }
          ],
          "buffers": [
            {
              "byteLength": 9599,
              "bytes": "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"
            }
          ]
        },
        "context": {
          "shiny": true,
          "rmarkdown": null
        },
        "vertexShader": "#line 2 1\n// File 1 is the vertex shader\n#ifdef GL_ES\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#endif\n\nattribute vec3 aPos;\nattribute vec4 aCol;\nuniform mat4 mvMatrix;\nuniform mat4 prMatrix;\nvarying vec4 vCol;\nvarying vec4 vPosition;\n\n#ifdef NEEDS_VNORMAL\nattribute vec3 aNorm;\nuniform mat4 normMatrix;\nvarying vec4 vNormal;\n#endif\n\n#if defined(HAS_TEXTURE) || defined (IS_TEXT)\nattribute vec2 aTexcoord;\nvarying vec2 vTexcoord;\n#endif\n\n#ifdef FIXED_SIZE\nuniform vec3 textScale;\n#endif\n\n#ifdef FIXED_QUADS\nattribute vec3 aOfs;\n#endif\n\n#ifdef IS_TWOSIDED\n#ifdef HAS_NORMALS\nvarying float normz;\nuniform mat4 invPrMatrix;\n#else\nattribute vec3 aPos1;\nattribute vec3 aPos2;\nvarying float normz;\n#endif\n#endif // IS_TWOSIDED\n\n#ifdef FAT_LINES\nattribute vec3 aNext;\nattribute vec2 aPoint;\nvarying vec2 vPoint;\nvarying float vLength;\nuniform float uAspect;\nuniform float uLwd;\n#endif\n\n#ifdef USE_ENVMAP\nvarying vec3 vReflection;\n#endif\n\nvoid main(void) {\n  \n#ifndef IS_BRUSH\n#if defined(NCLIPPLANES) || !defined(FIXED_QUADS) || defined(HAS_FOG) || defined(USE_ENVMAP)\n  vPosition = mvMatrix * vec4(aPos, 1.);\n#endif\n  \n#ifndef FIXED_QUADS\n  gl_Position = prMatrix * vPosition;\n#endif\n#endif // !IS_BRUSH\n  \n#ifdef IS_POINTS\n  gl_PointSize = POINTSIZE;\n#endif\n  \n  vCol = aCol;\n  \n// USE_ENVMAP implies NEEDS_VNORMAL\n\n#ifdef NEEDS_VNORMAL\n  vNormal = normMatrix * vec4(-aNorm, dot(aNorm, aPos));\n#endif\n\n#ifdef USE_ENVMAP\n  vReflection = normalize(reflect(vPosition.xyz/vPosition.w, \n                        normalize(vNormal.xyz/vNormal.w)));\n#endif\n  \n#ifdef IS_TWOSIDED\n#ifdef HAS_NORMALS\n  /* normz should be calculated *after* projection */\n  normz = (invPrMatrix*vNormal).z;\n#else\n  vec4 pos1 = prMatrix*(mvMatrix*vec4(aPos1, 1.));\n  pos1 = pos1/pos1.w - gl_Position/gl_Position.w;\n  vec4 pos2 = prMatrix*(mvMatrix*vec4(aPos2, 1.));\n  pos2 = pos2/pos2.w - gl_Position/gl_Position.w;\n  normz = pos1.x*pos2.y - pos1.y*pos2.x;\n#endif\n#endif // IS_TWOSIDED\n  \n#ifdef NEEDS_VNORMAL\n  vNormal = vec4(normalize(vNormal.xyz), 1);\n#endif\n  \n#if defined(HAS_TEXTURE) || defined(IS_TEXT)\n  vTexcoord = aTexcoord;\n#endif\n  \n#if defined(FIXED_SIZE) && !defined(ROTATING)\n  vec4 pos = prMatrix * mvMatrix * vec4(aPos, 1.);\n  pos = pos/pos.w;\n  gl_Position = pos + vec4(aOfs*textScale, 0.);\n#endif\n  \n#if defined(IS_SPRITES) && !defined(FIXED_SIZE)\n  vec4 pos = mvMatrix * vec4(aPos, 1.);\n  pos = pos/pos.w + vec4(aOfs,  0.);\n  gl_Position = prMatrix*pos;\n#endif\n  \n#ifdef FAT_LINES\n  /* This code was inspired by Matt Deslauriers' code in \n   https://mattdesl.svbtle.com/drawing-lines-is-hard */\n  vec2 aspectVec = vec2(uAspect, 1.0);\n  mat4 projViewModel = prMatrix * mvMatrix;\n  vec4 currentProjected = projViewModel * vec4(aPos, 1.0);\n  currentProjected = currentProjected/currentProjected.w;\n  vec4 nextProjected = projViewModel * vec4(aNext, 1.0);\n  vec2 currentScreen = currentProjected.xy * aspectVec;\n  vec2 nextScreen = (nextProjected.xy / nextProjected.w) * aspectVec;\n  float len = uLwd;\n  vec2 dir = vec2(1.0, 0.0);\n  vPoint = aPoint;\n  vLength = length(nextScreen - currentScreen)/2.0;\n  vLength = vLength/(vLength + len);\n  if (vLength > 0.0) {\n    dir = normalize(nextScreen - currentScreen);\n  }\n  vec2 normal = vec2(-dir.y, dir.x);\n  dir.x /= uAspect;\n  normal.x /= uAspect;\n  vec4 offset = vec4(len*(normal*aPoint.x*aPoint.y - dir), 0.0, 0.0);\n  gl_Position = currentProjected + offset;\n#endif\n  \n#ifdef IS_BRUSH\n  gl_Position = vec4(aPos, 1.);\n#endif\n}",
        "fragmentShader": "#line 2 2\n// File 2 is the fragment shader\n#ifdef GL_ES\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#endif\nvarying vec4 vCol; // carries alpha\nvarying vec4 vPosition;\n#if defined(HAS_TEXTURE) || defined (IS_TEXT)\nvarying vec2 vTexcoord;\nuniform sampler2D uSampler;\n#endif\n\n#ifdef HAS_FOG\nuniform int uFogMode;\nuniform vec3 uFogColor;\nuniform vec4 uFogParms;\n#endif\n\n#if defined(IS_LIT) && !defined(FIXED_QUADS)\nvarying vec4 vNormal;\n#endif\n\n#if NCLIPPLANES > 0\nuniform vec4 vClipplane[NCLIPPLANES];\n#endif\n\n#if NLIGHTS > 0\nuniform mat4 mvMatrix;\n#endif\n\n#ifdef IS_LIT\nuniform vec3 emission;\nuniform float shininess;\n#if NLIGHTS > 0\nuniform vec3 ambient[NLIGHTS];\nuniform vec3 specular[NLIGHTS]; // light*material\nuniform vec3 diffuse[NLIGHTS];\nuniform vec3 lightDir[NLIGHTS];\nuniform bool viewpoint[NLIGHTS];\nuniform bool finite[NLIGHTS];\n#endif\n#endif // IS_LIT\n\n#ifdef IS_TWOSIDED\nuniform bool front;\nvarying float normz;\n#endif\n\n#ifdef FAT_LINES\nvarying vec2 vPoint;\nvarying float vLength;\n#endif\n\n#ifdef USE_ENVMAP\nvarying vec3 vReflection;\n#endif\n\nvoid main(void) {\n  vec4 fragColor;\n#ifdef FAT_LINES\n  vec2 point = vPoint;\n  bool neg = point.y < 0.0;\n  point.y = neg ? (point.y + vLength)/(1.0 - vLength) :\n                 -(point.y - vLength)/(1.0 - vLength);\n#if defined(IS_TRANSPARENT) && defined(IS_LINESTRIP)\n  if (neg && length(point) <= 1.0) discard;\n#endif\n  point.y = min(point.y, 0.0);\n  if (length(point) > 1.0) discard;\n#endif // FAT_LINES\n  \n#ifdef ROUND_POINTS\n  vec2 coord = gl_PointCoord - vec2(0.5);\n  if (length(coord) > 0.5) discard;\n#endif\n  \n#if NCLIPPLANES > 0\n  for (int i = 0; i < NCLIPPLANES; i++)\n    if (dot(vPosition, vClipplane[i]) < 0.0) discard;\n#endif\n    \n#ifdef FIXED_QUADS\n    vec3 n = vec3(0., 0., 1.);\n#elif defined(IS_LIT)\n    vec3 n = normalize(vNormal.xyz);\n#endif\n    \n#ifdef IS_TWOSIDED\n    if ((normz <= 0.) != front) discard;\n#endif\n\n#ifdef IS_LIT\n    vec3 eye = normalize(-vPosition.xyz/vPosition.w);\n    vec3 lightdir;\n    vec4 colDiff;\n    vec3 halfVec;\n    vec4 lighteffect = vec4(emission, 0.);\n    vec3 col;\n    float nDotL;\n#ifdef FIXED_QUADS\n    n = -faceforward(n, n, eye);\n#endif\n    \n#if NLIGHTS > 0\n    // Simulate two-sided lighting\n    if (n.z < 0.0)\n      n = -n;\n    for (int i=0;i<NLIGHTS;i++) {\n      colDiff = vec4(vCol.rgb * diffuse[i], vCol.a);\n      lightdir = lightDir[i];\n      if (!viewpoint[i]) {\n        if (finite[i]) {\n          lightdir = (mvMatrix * vec4(lightdir, 1.)).xyz;\n        } else {\n          lightdir = (mvMatrix * vec4(lightdir, 0.)).xyz;\n        }\n      }\n      if (!finite[i]) {\n        halfVec = normalize(lightdir + eye);\n      } else {\n        lightdir = normalize(lightdir - vPosition.xyz/vPosition.w);\n        halfVec = normalize(lightdir + eye);\n      }\n      col = ambient[i];\n      nDotL = dot(n, lightdir);\n      col = col + max(nDotL, 0.) * colDiff.rgb;\n      col = col + pow(max(dot(halfVec, n), 0.), shininess) * specular[i];\n      lighteffect = lighteffect + vec4(col, colDiff.a);\n    }\n#endif\n    \n#else // not IS_LIT\n    vec4 colDiff = vCol;\n    vec4 lighteffect = colDiff;\n#endif\n    \n#ifdef IS_TEXT\n    vec4 textureColor = lighteffect*texture2D(uSampler, vTexcoord);\n#endif\n    \n#ifdef HAS_TEXTURE\n\n// These calculations use the definitions from \n// https://docs.gl/gl3/glTexEnv\n\n#ifdef USE_ENVMAP\n    float m = 2.0 * sqrt(dot(vReflection, vReflection) + 2.0*vReflection.z + 1.0);\n    vec4 textureColor = texture2D(uSampler, vReflection.xy / m + vec2(0.5, 0.5));\n#else\n    vec4 textureColor = texture2D(uSampler, vTexcoord);\n#endif\n\n#ifdef TEXTURE_rgb\n\n#if defined(TEXMODE_replace) || defined(TEXMODE_decal)\n    textureColor = vec4(textureColor.rgb, lighteffect.a);\n#endif \n\n#ifdef TEXMODE_modulate\n    textureColor = lighteffect*vec4(textureColor.rgb, 1.);\n#endif\n\n#ifdef TEXMODE_blend\n    textureColor = vec4((1. - textureColor.rgb) * lighteffect.rgb, lighteffect.a);\n#endif\n\n#ifdef TEXMODE_add\n    textureColor = vec4(lighteffect.rgb + textureColor.rgb, lighteffect.a);\n#endif\n\n#endif //TEXTURE_rgb\n        \n#ifdef TEXTURE_rgba\n\n#ifdef TEXMODE_replace\n// already done\n#endif \n\n#ifdef TEXMODE_modulate\n    textureColor = lighteffect*textureColor;\n#endif\n\n#ifdef TEXMODE_decal\n    textureColor = vec4((1. - textureColor.a)*lighteffect.rgb) +\n                     textureColor.a*textureColor.rgb, \n                     lighteffect.a);\n#endif\n\n#ifdef TEXMODE_blend\n    textureColor = vec4((1. - textureColor.rgb) * lighteffect.rgb,\n                    lighteffect.a*textureColor.a);\n#endif\n\n#ifdef TEXMODE_add\n    textureColor = vec4(lighteffect.rgb + textureColor.rgb,\n                    lighteffect.a*textureColor.a);\n#endif\n    \n#endif //TEXTURE_rgba\n    \n#ifdef TEXTURE_alpha\n    float luminance = dot(vec3(1.,1.,1.),textureColor.rgb)/3.;\n\n#if defined(TEXMODE_replace) || defined(TEXMODE_decal)\n    textureColor = vec4(lighteffect.rgb, luminance);\n#endif \n\n#if defined(TEXMODE_modulate) || defined(TEXMODE_blend) || defined(TEXMODE_add)\n    textureColor = vec4(lighteffect.rgb, lighteffect.a*luminance);\n#endif\n \n#endif // TEXTURE_alpha\n    \n// The TEXTURE_luminance values are not from that reference    \n#ifdef TEXTURE_luminance\n    float luminance = dot(vec3(1.,1.,1.),textureColor.rgb)/3.;\n\n#if defined(TEXMODE_replace) || defined(TEXMODE_decal)\n    textureColor = vec4(luminance, luminance, luminance, lighteffect.a);\n#endif \n\n#ifdef TEXMODE_modulate\n    textureColor = vec4(luminance*lighteffect.rgb, lighteffect.a);\n#endif\n\n#ifdef TEXMODE_blend\n    textureColor = vec4((1. - luminance)*lighteffect.rgb,\n                        lighteffect.a);\n#endif\n\n#ifdef TEXMODE_add\n    textureColor = vec4(luminance + lighteffect.rgb, lighteffect.a);\n#endif\n\n#endif // TEXTURE_luminance\n \n    \n#ifdef TEXTURE_luminance_alpha\n    float luminance = dot(vec3(1.,1.,1.),textureColor.rgb)/3.;\n\n#if defined(TEXMODE_replace) || defined(TEXMODE_decal)\n    textureColor = vec4(luminance, luminance, luminance, textureColor.a);\n#endif \n\n#ifdef TEXMODE_modulate\n    textureColor = vec4(luminance*lighteffect.rgb, \n                        textureColor.a*lighteffect.a);\n#endif\n\n#ifdef TEXMODE_blend\n    textureColor = vec4((1. - luminance)*lighteffect.rgb,\n                        textureColor.a*lighteffect.a);\n#endif\n\n#ifdef TEXMODE_add\n    textureColor = vec4(luminance + lighteffect.rgb, \n                        textureColor.a*lighteffect.a);\n\n#endif\n\n#endif // TEXTURE_luminance_alpha\n    \n    fragColor = textureColor;\n\n#elif defined(IS_TEXT)\n    if (textureColor.a < 0.1)\n      discard;\n    else\n      fragColor = textureColor;\n#else\n    fragColor = lighteffect;\n#endif // HAS_TEXTURE\n    \n#ifdef HAS_FOG\n    // uFogParms elements: x = near, y = far, z = fogscale, w = (1-sin(FOV/2))/(1+sin(FOV/2))\n    // In Exp and Exp2: use density = density/far\n    // fogF will be the proportion of fog\n    // Initialize it to the linear value\n    float fogF;\n    if (uFogMode > 0) {\n      fogF = (uFogParms.y - vPosition.z/vPosition.w)/(uFogParms.y - uFogParms.x);\n      if (uFogMode > 1)\n        fogF = mix(uFogParms.w, 1.0, fogF);\n      fogF = fogF*uFogParms.z;\n      if (uFogMode == 2)\n        fogF = 1.0 - exp(-fogF);\n      // Docs are wrong: use (density*c)^2, not density*c^2\n      // https://gitlab.freedesktop.org/mesa/mesa/-/blob/master/src/mesa/swrast/s_fog.c#L58\n      else if (uFogMode == 3)\n        fogF = 1.0 - exp(-fogF*fogF);\n      fogF = clamp(fogF, 0.0, 1.0);\n      gl_FragColor = vec4(mix(fragColor.rgb, uFogColor, fogF), fragColor.a);\n    } else gl_FragColor = fragColor;\n#else\n    gl_FragColor = fragColor;\n#endif // HAS_FOG\n    \n}",
        "players": [

        ],
        "webGLoptions": {
          "preserveDrawingBuffer": true
        },
        "fastTransparency": true,
        "altText": "3D plot"
      },
      "evals": [

      ],
      "jsHooks": [

      ],
      "deps": [
        {
          "name": "rglwidgetClass",
          "version": "1.3.24",
          "src": {
            "href": "rglwidgetClass-1.3.24"
          },
          "meta": null,
          "script": "rglClass.min.js",
          "stylesheet": "rgl.css",
          "head": null,
          "attachment": null,
          "all_files": false
        },
        {
          "name": "CanvasMatrix4",
          "version": "1.3.24",
          "src": {
            "href": "CanvasMatrix4-1.3.24"
          },
          "meta": null,
          "script": "CanvasMatrix.min.js",
          "stylesheet": null,
          "head": null,
          "attachment": null,
          "all_files": false
        }
      ]
    },
    "x3prgl3": {
      "x": {
        "material": {
          "color": "#000000",
          "alpha": 1,
          "lit": true,
          "ambient": "#000000",
          "specular": "#FFFFFF",
          "emission": "#000000",
          "shininess": 50,
          "smooth": true,
          "front": "filled",
          "back": "filled",
          "size": 3,
          "lwd": 1,
          "fog": true,
          "point_antialias": false,
          "line_antialias": false,
          "texture": null,
          "textype": "rgb",
          "texmode": "modulate",
          "texmipmap": false,
          "texminfilter": "linear",
          "texmagfilter": "linear",
          "texenvmap": false,
          "depth_mask": true,
          "depth_test": "less",
          "isTransparent": false,
          "polygon_offset": [
            0,
            0
          ],
          "margin": "",
          "floating": false,
          "tag": "",
          "blend": [
            "src_alpha",
            "one_minus_src_alpha"
          ]
        },
        "rootSubscene": 26,
        "objects": {
          "35": {
            "id": 35,
            "type": "surface",
            "material": {

            },
            "vertices": "0",
            "colors": "2",
            "dim": [
              [
                9,
                29
              ]
            ],
            "centers": "3",
            "normals": "1",
            "ignoreExtent": false,
            "flipped": false,
            "flags": 32771
          },
          "33": {
            "id": 33,
            "type": "light",
            "vertices": [
              [
                -2109.375,
                1171.875,
                243.2497100830078
              ]
            ],
            "colors": [
              [
                0.1019607856869698,
                0.1019607856869698,
                0.1019607856869698,
                1
              ],
              [
                0.4000000059604645,
                0.4000000059604645,
                0.4000000059604645,
                1
              ],
              [
                0.4000000059604645,
                0.4000000059604645,
                0.4000000059604645,
                1
              ]
            ],
            "viewpoint": true,
            "finite": true
          },
          "34": {
            "id": 34,
            "type": "light",
            "vertices": [
              [
                0,
                0.258819043636322,
                0.9659258127212524
              ]
            ],
            "colors": [
              [
                1,
                1,
                1,
                1
              ],
              [
                0.2000000029802322,
                0.2000000029802322,
                0.2000000029802322,
                1
              ],
              [
                0.2000000029802322,
                0.2000000029802322,
                0.2000000029802322,
                1
              ]
            ],
            "viewpoint": true,
            "finite": false
          },
          "32": {
            "id": 32,
            "type": "background",
            "material": {
              "lit": false,
              "back": "lines"
            },
            "colors": "4",
            "centers": "5",
            "sphere": false,
            "fogtype": "none",
            "fogscale": 1,
            "flags": 32768
          },
          "26": {
            "id": 26,
            "type": "subscene",
            "par3d": {
              "antialias": 4,
              "FOV": 30,
              "ignoreExtent": false,
              "listeners": 26,
              "mouseMode": {
                "none": "none",
                "left": "trackball",
                "right": "zoom",
                "middle": "fov",
                "wheel": "pull"
              },
              "observer": [
                0,
                0,
                4578.64599609375
              ],
              "modelMatrix": [
                [
                  1,
                  0,
                  0,
                  -390.625
                ],
                [
                  0,
                  1,
                  0,
                  -1171.875
                ],
                [
                  0,
                  0,
                  1,
                  -4489.66650390625
                ],
                [
                  0,
                  0,
                  0,
                  1
                ]
              ],
              "projMatrix": [
                [
                  9.330126762390137,
                  0,
                  0,
                  0
                ],
                [
                  0,
                  2.892339468002319,
                  0,
                  0
                ],
                [
                  0,
                  0,
                  -3.863703727722168,
                  -16505.490234375
                ],
                [
                  0,
                  0,
                  -1,
                  0
                ]
              ],
              "skipRedraw": false,
              "userMatrix": [
                [
                  1,
                  0,
                  0,
                  0
                ],
                [
                  0,
                  1,
                  0,
                  0
                ],
                [
                  0,
                  0,
                  1,
                  0
                ],
                [
                  0,
                  0,
                  0,
                  1
                ]
              ],
              "userProjection": [
                [
                  1,
                  0,
                  0,
                  0
                ],
                [
                  0,
                  1,
                  0,
                  0
                ],
                [
                  0,
                  0,
                  1,
                  0
                ],
                [
                  0,
                  0,
                  0,
                  1
                ]
              ],
              "scale": [
                1,
                1,
                1
              ],
              "viewport": {
                "x": 0,
                "y": 0,
                "width": 1,
                "height": 1
              },
              "zoom": 0.4000000059604645,
              "bbox": [
                78.125,
                703.125,
                78.125,
                2265.625,
                -421.2088317871094,
                243.2497100830078
              ],
              "windowRect": [
                40,
                85,
                195,
                585
              ],
              "family": "sans",
              "font": 1,
              "cex": 1,
              "useFreeType": true,
              "fontname": "/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/rgl/fonts/FreeSans.ttf",
              "maxClipPlanes": 6,
              "glVersion": 2.1,
              "activeSubscene": 0
            },
            "embeddings": {
              "viewport": "replace",
              "projection": "replace",
              "model": "replace",
              "mouse": "replace"
            },
            "objects": [
              32,
              35,
              33,
              34
            ],
            "subscenes": [

            ],
            "flags": 33027
          }
        },
        "crosstalk": {
          "key": [

          ],
          "group": [

          ],
          "id": [

          ],
          "options": [

          ]
        },
        "width": 156,
        "height": 501,
        "buffer": {
          "accessors": [
            {
              "bufferView": 0,
              "componentType": 5126,
              "count": 261,
              "type": "VEC3"
            },
            {
              "bufferView": 1,
              "componentType": 5126,
              "count": 261,
              "type": "VEC3"
            },
            {
              "bufferView": 2,
              "componentType": 5126,
              "count": 1,
              "type": "VEC4"
            },
            {
              "bufferView": 3,
              "componentType": 5126,
              "count": 224,
              "type": "VEC3"
            },
            {
              "bufferView": 4,
              "componentType": 5121,
              "count": 1,
              "type": "VEC4"
            },
            {
              "bufferView": 5,
              "componentType": 5121,
              "count": 1,
              "type": "VEC3"
            }
          ],
          "bufferViews": [
            {
              "buffer": 0,
              "byteLength": 3132,
              "byteOffset": 0
            },
            {
              "buffer": 0,
              "byteLength": 3132,
              "byteOffset": 3132
            },
            {
              "buffer": 0,
              "byteLength": 16,
              "byteOffset": 6264
            },
            {
              "buffer": 0,
              "byteLength": 2688,
              "byteOffset": 6280
            },
            {
              "buffer": 0,
              "byteLength": 4,
              "byteOffset": 8968
            },
            {
              "buffer": 0,
              "byteLength": 3,
              "byteOffset": 8972
            }
          ],
          "buffers": [
            {
              "byteLength": 8975,
              "bytes": "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\nJDnOwwEBAQEAAAA="
            }
          ]
        },
        "context": {
          "shiny": true,
          "rmarkdown": null
        },
        "vertexShader": "#line 2 1\n// File 1 is the vertex shader\n#ifdef GL_ES\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#endif\n\nattribute vec3 aPos;\nattribute vec4 aCol;\nuniform mat4 mvMatrix;\nuniform mat4 prMatrix;\nvarying vec4 vCol;\nvarying vec4 vPosition;\n\n#ifdef NEEDS_VNORMAL\nattribute vec3 aNorm;\nuniform mat4 normMatrix;\nvarying vec4 vNormal;\n#endif\n\n#if defined(HAS_TEXTURE) || defined (IS_TEXT)\nattribute vec2 aTexcoord;\nvarying vec2 vTexcoord;\n#endif\n\n#ifdef FIXED_SIZE\nuniform vec3 textScale;\n#endif\n\n#ifdef FIXED_QUADS\nattribute vec3 aOfs;\n#endif\n\n#ifdef IS_TWOSIDED\n#ifdef HAS_NORMALS\nvarying float normz;\nuniform mat4 invPrMatrix;\n#else\nattribute vec3 aPos1;\nattribute vec3 aPos2;\nvarying float normz;\n#endif\n#endif // IS_TWOSIDED\n\n#ifdef FAT_LINES\nattribute vec3 aNext;\nattribute vec2 aPoint;\nvarying vec2 vPoint;\nvarying float vLength;\nuniform float uAspect;\nuniform float uLwd;\n#endif\n\n#ifdef USE_ENVMAP\nvarying vec3 vReflection;\n#endif\n\nvoid main(void) {\n  \n#ifndef IS_BRUSH\n#if defined(NCLIPPLANES) || !defined(FIXED_QUADS) || defined(HAS_FOG) || defined(USE_ENVMAP)\n  vPosition = mvMatrix * vec4(aPos, 1.);\n#endif\n  \n#ifndef FIXED_QUADS\n  gl_Position = prMatrix * vPosition;\n#endif\n#endif // !IS_BRUSH\n  \n#ifdef IS_POINTS\n  gl_PointSize = POINTSIZE;\n#endif\n  \n  vCol = aCol;\n  \n// USE_ENVMAP implies NEEDS_VNORMAL\n\n#ifdef NEEDS_VNORMAL\n  vNormal = normMatrix * vec4(-aNorm, dot(aNorm, aPos));\n#endif\n\n#ifdef USE_ENVMAP\n  vReflection = normalize(reflect(vPosition.xyz/vPosition.w, \n                        normalize(vNormal.xyz/vNormal.w)));\n#endif\n  \n#ifdef IS_TWOSIDED\n#ifdef HAS_NORMALS\n  /* normz should be calculated *after* projection */\n  normz = (invPrMatrix*vNormal).z;\n#else\n  vec4 pos1 = prMatrix*(mvMatrix*vec4(aPos1, 1.));\n  pos1 = pos1/pos1.w - gl_Position/gl_Position.w;\n  vec4 pos2 = prMatrix*(mvMatrix*vec4(aPos2, 1.));\n  pos2 = pos2/pos2.w - gl_Position/gl_Position.w;\n  normz = pos1.x*pos2.y - pos1.y*pos2.x;\n#endif\n#endif // IS_TWOSIDED\n  \n#ifdef NEEDS_VNORMAL\n  vNormal = vec4(normalize(vNormal.xyz), 1);\n#endif\n  \n#if defined(HAS_TEXTURE) || defined(IS_TEXT)\n  vTexcoord = aTexcoord;\n#endif\n  \n#if defined(FIXED_SIZE) && !defined(ROTATING)\n  vec4 pos = prMatrix * mvMatrix * vec4(aPos, 1.);\n  pos = pos/pos.w;\n  gl_Position = pos + vec4(aOfs*textScale, 0.);\n#endif\n  \n#if defined(IS_SPRITES) && !defined(FIXED_SIZE)\n  vec4 pos = mvMatrix * vec4(aPos, 1.);\n  pos = pos/pos.w + vec4(aOfs,  0.);\n  gl_Position = prMatrix*pos;\n#endif\n  \n#ifdef FAT_LINES\n  /* This code was inspired by Matt Deslauriers' code in \n   https://mattdesl.svbtle.com/drawing-lines-is-hard */\n  vec2 aspectVec = vec2(uAspect, 1.0);\n  mat4 projViewModel = prMatrix * mvMatrix;\n  vec4 currentProjected = projViewModel * vec4(aPos, 1.0);\n  currentProjected = currentProjected/currentProjected.w;\n  vec4 nextProjected = projViewModel * vec4(aNext, 1.0);\n  vec2 currentScreen = currentProjected.xy * aspectVec;\n  vec2 nextScreen = (nextProjected.xy / nextProjected.w) * aspectVec;\n  float len = uLwd;\n  vec2 dir = vec2(1.0, 0.0);\n  vPoint = aPoint;\n  vLength = length(nextScreen - currentScreen)/2.0;\n  vLength = vLength/(vLength + len);\n  if (vLength > 0.0) {\n    dir = normalize(nextScreen - currentScreen);\n  }\n  vec2 normal = vec2(-dir.y, dir.x);\n  dir.x /= uAspect;\n  normal.x /= uAspect;\n  vec4 offset = vec4(len*(normal*aPoint.x*aPoint.y - dir), 0.0, 0.0);\n  gl_Position = currentProjected + offset;\n#endif\n  \n#ifdef IS_BRUSH\n  gl_Position = vec4(aPos, 1.);\n#endif\n}",
        "fragmentShader": "#line 2 2\n// File 2 is the fragment shader\n#ifdef GL_ES\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#endif\nvarying vec4 vCol; // carries alpha\nvarying vec4 vPosition;\n#if defined(HAS_TEXTURE) || defined (IS_TEXT)\nvarying vec2 vTexcoord;\nuniform sampler2D uSampler;\n#endif\n\n#ifdef HAS_FOG\nuniform int uFogMode;\nuniform vec3 uFogColor;\nuniform vec4 uFogParms;\n#endif\n\n#if defined(IS_LIT) && !defined(FIXED_QUADS)\nvarying vec4 vNormal;\n#endif\n\n#if NCLIPPLANES > 0\nuniform vec4 vClipplane[NCLIPPLANES];\n#endif\n\n#if NLIGHTS > 0\nuniform mat4 mvMatrix;\n#endif\n\n#ifdef IS_LIT\nuniform vec3 emission;\nuniform float shininess;\n#if NLIGHTS > 0\nuniform vec3 ambient[NLIGHTS];\nuniform vec3 specular[NLIGHTS]; // light*material\nuniform vec3 diffuse[NLIGHTS];\nuniform vec3 lightDir[NLIGHTS];\nuniform bool viewpoint[NLIGHTS];\nuniform bool finite[NLIGHTS];\n#endif\n#endif // IS_LIT\n\n#ifdef IS_TWOSIDED\nuniform bool front;\nvarying float normz;\n#endif\n\n#ifdef FAT_LINES\nvarying vec2 vPoint;\nvarying float vLength;\n#endif\n\n#ifdef USE_ENVMAP\nvarying vec3 vReflection;\n#endif\n\nvoid main(void) {\n  vec4 fragColor;\n#ifdef FAT_LINES\n  vec2 point = vPoint;\n  bool neg = point.y < 0.0;\n  point.y = neg ? (point.y + vLength)/(1.0 - vLength) :\n                 -(point.y - vLength)/(1.0 - vLength);\n#if defined(IS_TRANSPARENT) && defined(IS_LINESTRIP)\n  if (neg && length(point) <= 1.0) discard;\n#endif\n  point.y = min(point.y, 0.0);\n  if (length(point) > 1.0) discard;\n#endif // FAT_LINES\n  \n#ifdef ROUND_POINTS\n  vec2 coord = gl_PointCoord - vec2(0.5);\n  if (length(coord) > 0.5) discard;\n#endif\n  \n#if NCLIPPLANES > 0\n  for (int i = 0; i < NCLIPPLANES; i++)\n    if (dot(vPosition, vClipplane[i]) < 0.0) discard;\n#endif\n    \n#ifdef FIXED_QUADS\n    vec3 n = vec3(0., 0., 1.);\n#elif defined(IS_LIT)\n    vec3 n = normalize(vNormal.xyz);\n#endif\n    \n#ifdef IS_TWOSIDED\n    if ((normz <= 0.) != front) discard;\n#endif\n\n#ifdef IS_LIT\n    vec3 eye = normalize(-vPosition.xyz/vPosition.w);\n    vec3 lightdir;\n    vec4 colDiff;\n    vec3 halfVec;\n    vec4 lighteffect = vec4(emission, 0.);\n    vec3 col;\n    float nDotL;\n#ifdef FIXED_QUADS\n    n = -faceforward(n, n, eye);\n#endif\n    \n#if NLIGHTS > 0\n    // Simulate two-sided lighting\n    if (n.z < 0.0)\n      n = -n;\n    for (int i=0;i<NLIGHTS;i++) {\n      colDiff = vec4(vCol.rgb * diffuse[i], vCol.a);\n      lightdir = lightDir[i];\n      if (!viewpoint[i]) {\n        if (finite[i]) {\n          lightdir = (mvMatrix * vec4(lightdir, 1.)).xyz;\n        } else {\n          lightdir = (mvMatrix * vec4(lightdir, 0.)).xyz;\n        }\n      }\n      if (!finite[i]) {\n        halfVec = normalize(lightdir + eye);\n      } else {\n        lightdir = normalize(lightdir - vPosition.xyz/vPosition.w);\n        halfVec = normalize(lightdir + eye);\n      }\n      col = ambient[i];\n      nDotL = dot(n, lightdir);\n      col = col + max(nDotL, 0.) * colDiff.rgb;\n      col = col + pow(max(dot(halfVec, n), 0.), shininess) * specular[i];\n      lighteffect = lighteffect + vec4(col, colDiff.a);\n    }\n#endif\n    \n#else // not IS_LIT\n    vec4 colDiff = vCol;\n    vec4 lighteffect = colDiff;\n#endif\n    \n#ifdef IS_TEXT\n    vec4 textureColor = lighteffect*texture2D(uSampler, vTexcoord);\n#endif\n    \n#ifdef HAS_TEXTURE\n\n// These calculations use the definitions from \n// https://docs.gl/gl3/glTexEnv\n\n#ifdef USE_ENVMAP\n    float m = 2.0 * sqrt(dot(vReflection, vReflection) + 2.0*vReflection.z + 1.0);\n    vec4 textureColor = texture2D(uSampler, vReflection.xy / m + vec2(0.5, 0.5));\n#else\n    vec4 textureColor = texture2D(uSampler, vTexcoord);\n#endif\n\n#ifdef TEXTURE_rgb\n\n#if defined(TEXMODE_replace) || defined(TEXMODE_decal)\n    textureColor = vec4(textureColor.rgb, lighteffect.a);\n#endif \n\n#ifdef TEXMODE_modulate\n    textureColor = lighteffect*vec4(textureColor.rgb, 1.);\n#endif\n\n#ifdef TEXMODE_blend\n    textureColor = vec4((1. - textureColor.rgb) * lighteffect.rgb, lighteffect.a);\n#endif\n\n#ifdef TEXMODE_add\n    textureColor = vec4(lighteffect.rgb + textureColor.rgb, lighteffect.a);\n#endif\n\n#endif //TEXTURE_rgb\n        \n#ifdef TEXTURE_rgba\n\n#ifdef TEXMODE_replace\n// already done\n#endif \n\n#ifdef TEXMODE_modulate\n    textureColor = lighteffect*textureColor;\n#endif\n\n#ifdef TEXMODE_decal\n    textureColor = vec4((1. - textureColor.a)*lighteffect.rgb) +\n                     textureColor.a*textureColor.rgb, \n                     lighteffect.a);\n#endif\n\n#ifdef TEXMODE_blend\n    textureColor = vec4((1. - textureColor.rgb) * lighteffect.rgb,\n                    lighteffect.a*textureColor.a);\n#endif\n\n#ifdef TEXMODE_add\n    textureColor = vec4(lighteffect.rgb + textureColor.rgb,\n                    lighteffect.a*textureColor.a);\n#endif\n    \n#endif //TEXTURE_rgba\n    \n#ifdef TEXTURE_alpha\n    float luminance = dot(vec3(1.,1.,1.),textureColor.rgb)/3.;\n\n#if defined(TEXMODE_replace) || defined(TEXMODE_decal)\n    textureColor = vec4(lighteffect.rgb, luminance);\n#endif \n\n#if defined(TEXMODE_modulate) || defined(TEXMODE_blend) || defined(TEXMODE_add)\n    textureColor = vec4(lighteffect.rgb, lighteffect.a*luminance);\n#endif\n \n#endif // TEXTURE_alpha\n    \n// The TEXTURE_luminance values are not from that reference    \n#ifdef TEXTURE_luminance\n    float luminance = dot(vec3(1.,1.,1.),textureColor.rgb)/3.;\n\n#if defined(TEXMODE_replace) || defined(TEXMODE_decal)\n    textureColor = vec4(luminance, luminance, luminance, lighteffect.a);\n#endif \n\n#ifdef TEXMODE_modulate\n    textureColor = vec4(luminance*lighteffect.rgb, lighteffect.a);\n#endif\n\n#ifdef TEXMODE_blend\n    textureColor = vec4((1. - luminance)*lighteffect.rgb,\n                        lighteffect.a);\n#endif\n\n#ifdef TEXMODE_add\n    textureColor = vec4(luminance + lighteffect.rgb, lighteffect.a);\n#endif\n\n#endif // TEXTURE_luminance\n \n    \n#ifdef TEXTURE_luminance_alpha\n    float luminance = dot(vec3(1.,1.,1.),textureColor.rgb)/3.;\n\n#if defined(TEXMODE_replace) || defined(TEXMODE_decal)\n    textureColor = vec4(luminance, luminance, luminance, textureColor.a);\n#endif \n\n#ifdef TEXMODE_modulate\n    textureColor = vec4(luminance*lighteffect.rgb, \n                        textureColor.a*lighteffect.a);\n#endif\n\n#ifdef TEXMODE_blend\n    textureColor = vec4((1. - luminance)*lighteffect.rgb,\n                        textureColor.a*lighteffect.a);\n#endif\n\n#ifdef TEXMODE_add\n    textureColor = vec4(luminance + lighteffect.rgb, \n                        textureColor.a*lighteffect.a);\n\n#endif\n\n#endif // TEXTURE_luminance_alpha\n    \n    fragColor = textureColor;\n\n#elif defined(IS_TEXT)\n    if (textureColor.a < 0.1)\n      discard;\n    else\n      fragColor = textureColor;\n#else\n    fragColor = lighteffect;\n#endif // HAS_TEXTURE\n    \n#ifdef HAS_FOG\n    // uFogParms elements: x = near, y = far, z = fogscale, w = (1-sin(FOV/2))/(1+sin(FOV/2))\n    // In Exp and Exp2: use density = density/far\n    // fogF will be the proportion of fog\n    // Initialize it to the linear value\n    float fogF;\n    if (uFogMode > 0) {\n      fogF = (uFogParms.y - vPosition.z/vPosition.w)/(uFogParms.y - uFogParms.x);\n      if (uFogMode > 1)\n        fogF = mix(uFogParms.w, 1.0, fogF);\n      fogF = fogF*uFogParms.z;\n      if (uFogMode == 2)\n        fogF = 1.0 - exp(-fogF);\n      // Docs are wrong: use (density*c)^2, not density*c^2\n      // https://gitlab.freedesktop.org/mesa/mesa/-/blob/master/src/mesa/swrast/s_fog.c#L58\n      else if (uFogMode == 3)\n        fogF = 1.0 - exp(-fogF*fogF);\n      fogF = clamp(fogF, 0.0, 1.0);\n      gl_FragColor = vec4(mix(fragColor.rgb, uFogColor, fogF), fragColor.a);\n    } else gl_FragColor = fragColor;\n#else\n    gl_FragColor = fragColor;\n#endif // HAS_FOG\n    \n}",
        "players": [

        ],
        "webGLoptions": {
          "preserveDrawingBuffer": true
        },
        "fastTransparency": true,
        "altText": "3D plot"
      },
      "evals": [

      ],
      "jsHooks": [

      ],
      "deps": [
        {
          "name": "rglwidgetClass",
          "version": "1.3.24",
          "src": {
            "href": "rglwidgetClass-1.3.24"
          },
          "meta": null,
          "script": "rglClass.min.js",
          "stylesheet": "rgl.css",
          "head": null,
          "attachment": null,
          "all_files": false
        },
        {
          "name": "CanvasMatrix4",
          "version": "1.3.24",
          "src": {
            "href": "CanvasMatrix4-1.3.24"
          },
          "meta": null,
          "script": "CanvasMatrix.min.js",
          "stylesheet": null,
          "head": null,
          "attachment": null,
          "all_files": false
        }
      ]
    },
    "x3prgl4": {
      "x": {
        "material": {
          "color": "#000000",
          "alpha": 1,
          "lit": true,
          "ambient": "#000000",
          "specular": "#FFFFFF",
          "emission": "#000000",
          "shininess": 50,
          "smooth": true,
          "front": "filled",
          "back": "filled",
          "size": 3,
          "lwd": 1,
          "fog": true,
          "point_antialias": false,
          "line_antialias": false,
          "texture": null,
          "textype": "rgb",
          "texmode": "modulate",
          "texmipmap": false,
          "texminfilter": "linear",
          "texmagfilter": "linear",
          "texenvmap": false,
          "depth_mask": true,
          "depth_test": "less",
          "isTransparent": false,
          "polygon_offset": [
            0,
            0
          ],
          "margin": "",
          "floating": false,
          "tag": "",
          "blend": [
            "src_alpha",
            "one_minus_src_alpha"
          ]
        },
        "rootSubscene": 36,
        "objects": {
          "45": {
            "id": 45,
            "type": "surface",
            "material": {

            },
            "vertices": "0",
            "colors": "2",
            "dim": [
              [
                9,
                31
              ]
            ],
            "centers": "3",
            "normals": "1",
            "ignoreExtent": false,
            "flipped": false,
            "flags": 32771
          },
          "43": {
            "id": 43,
            "type": "light",
            "vertices": [
              [
                -2265.625,
                1250,
                247.5170745849609
              ]
            ],
            "colors": [
              [
                0.1019607856869698,
                0.1019607856869698,
                0.1019607856869698,
                1
              ],
              [
                0.4000000059604645,
                0.4000000059604645,
                0.4000000059604645,
                1
              ],
              [
                0.4000000059604645,
                0.4000000059604645,
                0.4000000059604645,
                1
              ]
            ],
            "viewpoint": true,
            "finite": true
          },
          "44": {
            "id": 44,
            "type": "light",
            "vertices": [
              [
                0,
                0.258819043636322,
                0.9659258127212524
              ]
            ],
            "colors": [
              [
                1,
                1,
                1,
                1
              ],
              [
                0.2000000029802322,
                0.2000000029802322,
                0.2000000029802322,
                1
              ],
              [
                0.2000000029802322,
                0.2000000029802322,
                0.2000000029802322,
                1
              ]
            ],
            "viewpoint": true,
            "finite": false
          },
          "42": {
            "id": 42,
            "type": "background",
            "material": {
              "lit": false,
              "back": "lines"
            },
            "colors": "4",
            "centers": "5",
            "sphere": false,
            "fogtype": "none",
            "fogscale": 1,
            "flags": 32768
          },
          "36": {
            "id": 36,
            "type": "subscene",
            "par3d": {
              "antialias": 4,
              "FOV": 30,
              "ignoreExtent": false,
              "listeners": 36,
              "mouseMode": {
                "none": "none",
                "left": "trackball",
                "right": "zoom",
                "middle": "fov",
                "wheel": "pull"
              },
              "observer": [
                0,
                0,
                4869.47265625
              ],
              "modelMatrix": [
                [
                  1,
                  0,
                  0,
                  -390.625
                ],
                [
                  0,
                  1,
                  0,
                  -1250
                ],
                [
                  0,
                  0,
                  1,
                  -4774.294921875
                ],
                [
                  0,
                  0,
                  0,
                  1
                ]
              ],
              "projMatrix": [
                [
                  9.330126762390137,
                  0,
                  0,
                  0
                ],
                [
                  0,
                  2.705736637115479,
                  0,
                  0
                ],
                [
                  0,
                  0,
                  -3.863703012466431,
                  -17553.884765625
                ],
                [
                  0,
                  0,
                  -1,
                  0
                ]
              ],
              "skipRedraw": false,
              "userMatrix": [
                [
                  1,
                  0,
                  0,
                  0
                ],
                [
                  0,
                  1,
                  0,
                  0
                ],
                [
                  0,
                  0,
                  1,
                  0
                ],
                [
                  0,
                  0,
                  0,
                  1
                ]
              ],
              "userProjection": [
                [
                  1,
                  0,
                  0,
                  0
                ],
                [
                  0,
                  1,
                  0,
                  0
                ],
                [
                  0,
                  0,
                  1,
                  0
                ],
                [
                  0,
                  0,
                  0,
                  1
                ]
              ],
              "scale": [
                1,
                1,
                1
              ],
              "viewport": {
                "x": 0,
                "y": 0,
                "width": 1,
                "height": 1
              },
              "zoom": 0.4000000059604645,
              "bbox": [
                78.125,
                703.125,
                78.125,
                2421.875,
                -437.8728637695312,
                247.5170745849609
              ],
              "windowRect": [
                60,
                105,
                205,
                605
              ],
              "family": "sans",
              "font": 1,
              "cex": 1,
              "useFreeType": true,
              "fontname": "/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/rgl/fonts/FreeSans.ttf",
              "maxClipPlanes": 6,
              "glVersion": 2.1,
              "activeSubscene": 0
            },
            "embeddings": {
              "viewport": "replace",
              "projection": "replace",
              "model": "replace",
              "mouse": "replace"
            },
            "objects": [
              42,
              45,
              43,
              44
            ],
            "subscenes": [

            ],
            "flags": 33027
          }
        },
        "crosstalk": {
          "key": [

          ],
          "group": [

          ],
          "id": [

          ],
          "options": [

          ]
        },
        "width": 146,
        "height": 501,
        "buffer": {
          "accessors": [
            {
              "bufferView": 0,
              "componentType": 5126,
              "count": 279,
              "type": "VEC3"
            },
            {
              "bufferView": 1,
              "componentType": 5126,
              "count": 279,
              "type": "VEC3"
            },
            {
              "bufferView": 2,
              "componentType": 5126,
              "count": 1,
              "type": "VEC4"
            },
            {
              "bufferView": 3,
              "componentType": 5126,
              "count": 240,
              "type": "VEC3"
            },
            {
              "bufferView": 4,
              "componentType": 5121,
              "count": 1,
              "type": "VEC4"
            },
            {
              "bufferView": 5,
              "componentType": 5121,
              "count": 1,
              "type": "VEC3"
            }
          ],
          "bufferViews": [
            {
              "buffer": 0,
              "byteLength": 3348,
              "byteOffset": 0
            },
            {
              "buffer": 0,
              "byteLength": 3348,
              "byteOffset": 3348
            },
            {
              "buffer": 0,
              "byteLength": 16,
              "byteOffset": 6696
            },
            {
              "buffer": 0,
              "byteLength": 2880,
              "byteOffset": 6712
            },
            {
              "buffer": 0,
              "byteLength": 4,
              "byteOffset": 9592
            },
            {
              "buffer": 0,
              "byteLength": 3,
              "byteOffset": 9596
            }
          ],
          "buffers": [
            {
              "byteLength": 9599,
              "bytes": "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"
            }
          ]
        },
        "context": {
          "shiny": true,
          "rmarkdown": null
        },
        "vertexShader": "#line 2 1\n// File 1 is the vertex shader\n#ifdef GL_ES\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#endif\n\nattribute vec3 aPos;\nattribute vec4 aCol;\nuniform mat4 mvMatrix;\nuniform mat4 prMatrix;\nvarying vec4 vCol;\nvarying vec4 vPosition;\n\n#ifdef NEEDS_VNORMAL\nattribute vec3 aNorm;\nuniform mat4 normMatrix;\nvarying vec4 vNormal;\n#endif\n\n#if defined(HAS_TEXTURE) || defined (IS_TEXT)\nattribute vec2 aTexcoord;\nvarying vec2 vTexcoord;\n#endif\n\n#ifdef FIXED_SIZE\nuniform vec3 textScale;\n#endif\n\n#ifdef FIXED_QUADS\nattribute vec3 aOfs;\n#endif\n\n#ifdef IS_TWOSIDED\n#ifdef HAS_NORMALS\nvarying float normz;\nuniform mat4 invPrMatrix;\n#else\nattribute vec3 aPos1;\nattribute vec3 aPos2;\nvarying float normz;\n#endif\n#endif // IS_TWOSIDED\n\n#ifdef FAT_LINES\nattribute vec3 aNext;\nattribute vec2 aPoint;\nvarying vec2 vPoint;\nvarying float vLength;\nuniform float uAspect;\nuniform float uLwd;\n#endif\n\n#ifdef USE_ENVMAP\nvarying vec3 vReflection;\n#endif\n\nvoid main(void) {\n  \n#ifndef IS_BRUSH\n#if defined(NCLIPPLANES) || !defined(FIXED_QUADS) || defined(HAS_FOG) || defined(USE_ENVMAP)\n  vPosition = mvMatrix * vec4(aPos, 1.);\n#endif\n  \n#ifndef FIXED_QUADS\n  gl_Position = prMatrix * vPosition;\n#endif\n#endif // !IS_BRUSH\n  \n#ifdef IS_POINTS\n  gl_PointSize = POINTSIZE;\n#endif\n  \n  vCol = aCol;\n  \n// USE_ENVMAP implies NEEDS_VNORMAL\n\n#ifdef NEEDS_VNORMAL\n  vNormal = normMatrix * vec4(-aNorm, dot(aNorm, aPos));\n#endif\n\n#ifdef USE_ENVMAP\n  vReflection = normalize(reflect(vPosition.xyz/vPosition.w, \n                        normalize(vNormal.xyz/vNormal.w)));\n#endif\n  \n#ifdef IS_TWOSIDED\n#ifdef HAS_NORMALS\n  /* normz should be calculated *after* projection */\n  normz = (invPrMatrix*vNormal).z;\n#else\n  vec4 pos1 = prMatrix*(mvMatrix*vec4(aPos1, 1.));\n  pos1 = pos1/pos1.w - gl_Position/gl_Position.w;\n  vec4 pos2 = prMatrix*(mvMatrix*vec4(aPos2, 1.));\n  pos2 = pos2/pos2.w - gl_Position/gl_Position.w;\n  normz = pos1.x*pos2.y - pos1.y*pos2.x;\n#endif\n#endif // IS_TWOSIDED\n  \n#ifdef NEEDS_VNORMAL\n  vNormal = vec4(normalize(vNormal.xyz), 1);\n#endif\n  \n#if defined(HAS_TEXTURE) || defined(IS_TEXT)\n  vTexcoord = aTexcoord;\n#endif\n  \n#if defined(FIXED_SIZE) && !defined(ROTATING)\n  vec4 pos = prMatrix * mvMatrix * vec4(aPos, 1.);\n  pos = pos/pos.w;\n  gl_Position = pos + vec4(aOfs*textScale, 0.);\n#endif\n  \n#if defined(IS_SPRITES) && !defined(FIXED_SIZE)\n  vec4 pos = mvMatrix * vec4(aPos, 1.);\n  pos = pos/pos.w + vec4(aOfs,  0.);\n  gl_Position = prMatrix*pos;\n#endif\n  \n#ifdef FAT_LINES\n  /* This code was inspired by Matt Deslauriers' code in \n   https://mattdesl.svbtle.com/drawing-lines-is-hard */\n  vec2 aspectVec = vec2(uAspect, 1.0);\n  mat4 projViewModel = prMatrix * mvMatrix;\n  vec4 currentProjected = projViewModel * vec4(aPos, 1.0);\n  currentProjected = currentProjected/currentProjected.w;\n  vec4 nextProjected = projViewModel * vec4(aNext, 1.0);\n  vec2 currentScreen = currentProjected.xy * aspectVec;\n  vec2 nextScreen = (nextProjected.xy / nextProjected.w) * aspectVec;\n  float len = uLwd;\n  vec2 dir = vec2(1.0, 0.0);\n  vPoint = aPoint;\n  vLength = length(nextScreen - currentScreen)/2.0;\n  vLength = vLength/(vLength + len);\n  if (vLength > 0.0) {\n    dir = normalize(nextScreen - currentScreen);\n  }\n  vec2 normal = vec2(-dir.y, dir.x);\n  dir.x /= uAspect;\n  normal.x /= uAspect;\n  vec4 offset = vec4(len*(normal*aPoint.x*aPoint.y - dir), 0.0, 0.0);\n  gl_Position = currentProjected + offset;\n#endif\n  \n#ifdef IS_BRUSH\n  gl_Position = vec4(aPos, 1.);\n#endif\n}",
        "fragmentShader": "#line 2 2\n// File 2 is the fragment shader\n#ifdef GL_ES\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#endif\nvarying vec4 vCol; // carries alpha\nvarying vec4 vPosition;\n#if defined(HAS_TEXTURE) || defined (IS_TEXT)\nvarying vec2 vTexcoord;\nuniform sampler2D uSampler;\n#endif\n\n#ifdef HAS_FOG\nuniform int uFogMode;\nuniform vec3 uFogColor;\nuniform vec4 uFogParms;\n#endif\n\n#if defined(IS_LIT) && !defined(FIXED_QUADS)\nvarying vec4 vNormal;\n#endif\n\n#if NCLIPPLANES > 0\nuniform vec4 vClipplane[NCLIPPLANES];\n#endif\n\n#if NLIGHTS > 0\nuniform mat4 mvMatrix;\n#endif\n\n#ifdef IS_LIT\nuniform vec3 emission;\nuniform float shininess;\n#if NLIGHTS > 0\nuniform vec3 ambient[NLIGHTS];\nuniform vec3 specular[NLIGHTS]; // light*material\nuniform vec3 diffuse[NLIGHTS];\nuniform vec3 lightDir[NLIGHTS];\nuniform bool viewpoint[NLIGHTS];\nuniform bool finite[NLIGHTS];\n#endif\n#endif // IS_LIT\n\n#ifdef IS_TWOSIDED\nuniform bool front;\nvarying float normz;\n#endif\n\n#ifdef FAT_LINES\nvarying vec2 vPoint;\nvarying float vLength;\n#endif\n\n#ifdef USE_ENVMAP\nvarying vec3 vReflection;\n#endif\n\nvoid main(void) {\n  vec4 fragColor;\n#ifdef FAT_LINES\n  vec2 point = vPoint;\n  bool neg = point.y < 0.0;\n  point.y = neg ? (point.y + vLength)/(1.0 - vLength) :\n                 -(point.y - vLength)/(1.0 - vLength);\n#if defined(IS_TRANSPARENT) && defined(IS_LINESTRIP)\n  if (neg && length(point) <= 1.0) discard;\n#endif\n  point.y = min(point.y, 0.0);\n  if (length(point) > 1.0) discard;\n#endif // FAT_LINES\n  \n#ifdef ROUND_POINTS\n  vec2 coord = gl_PointCoord - vec2(0.5);\n  if (length(coord) > 0.5) discard;\n#endif\n  \n#if NCLIPPLANES > 0\n  for (int i = 0; i < NCLIPPLANES; i++)\n    if (dot(vPosition, vClipplane[i]) < 0.0) discard;\n#endif\n    \n#ifdef FIXED_QUADS\n    vec3 n = vec3(0., 0., 1.);\n#elif defined(IS_LIT)\n    vec3 n = normalize(vNormal.xyz);\n#endif\n    \n#ifdef IS_TWOSIDED\n    if ((normz <= 0.) != front) discard;\n#endif\n\n#ifdef IS_LIT\n    vec3 eye = normalize(-vPosition.xyz/vPosition.w);\n    vec3 lightdir;\n    vec4 colDiff;\n    vec3 halfVec;\n    vec4 lighteffect = vec4(emission, 0.);\n    vec3 col;\n    float nDotL;\n#ifdef FIXED_QUADS\n    n = -faceforward(n, n, eye);\n#endif\n    \n#if NLIGHTS > 0\n    // Simulate two-sided lighting\n    if (n.z < 0.0)\n      n = -n;\n    for (int i=0;i<NLIGHTS;i++) {\n      colDiff = vec4(vCol.rgb * diffuse[i], vCol.a);\n      lightdir = lightDir[i];\n      if (!viewpoint[i]) {\n        if (finite[i]) {\n          lightdir = (mvMatrix * vec4(lightdir, 1.)).xyz;\n        } else {\n          lightdir = (mvMatrix * vec4(lightdir, 0.)).xyz;\n        }\n      }\n      if (!finite[i]) {\n        halfVec = normalize(lightdir + eye);\n      } else {\n        lightdir = normalize(lightdir - vPosition.xyz/vPosition.w);\n        halfVec = normalize(lightdir + eye);\n      }\n      col = ambient[i];\n      nDotL = dot(n, lightdir);\n      col = col + max(nDotL, 0.) * colDiff.rgb;\n      col = col + pow(max(dot(halfVec, n), 0.), shininess) * specular[i];\n      lighteffect = lighteffect + vec4(col, colDiff.a);\n    }\n#endif\n    \n#else // not IS_LIT\n    vec4 colDiff = vCol;\n    vec4 lighteffect = colDiff;\n#endif\n    \n#ifdef IS_TEXT\n    vec4 textureColor = lighteffect*texture2D(uSampler, vTexcoord);\n#endif\n    \n#ifdef HAS_TEXTURE\n\n// These calculations use the definitions from \n// https://docs.gl/gl3/glTexEnv\n\n#ifdef USE_ENVMAP\n    float m = 2.0 * sqrt(dot(vReflection, vReflection) + 2.0*vReflection.z + 1.0);\n    vec4 textureColor = texture2D(uSampler, vReflection.xy / m + vec2(0.5, 0.5));\n#else\n    vec4 textureColor = texture2D(uSampler, vTexcoord);\n#endif\n\n#ifdef TEXTURE_rgb\n\n#if defined(TEXMODE_replace) || defined(TEXMODE_decal)\n    textureColor = vec4(textureColor.rgb, lighteffect.a);\n#endif \n\n#ifdef TEXMODE_modulate\n    textureColor = lighteffect*vec4(textureColor.rgb, 1.);\n#endif\n\n#ifdef TEXMODE_blend\n    textureColor = vec4((1. - textureColor.rgb) * lighteffect.rgb, lighteffect.a);\n#endif\n\n#ifdef TEXMODE_add\n    textureColor = vec4(lighteffect.rgb + textureColor.rgb, lighteffect.a);\n#endif\n\n#endif //TEXTURE_rgb\n        \n#ifdef TEXTURE_rgba\n\n#ifdef TEXMODE_replace\n// already done\n#endif \n\n#ifdef TEXMODE_modulate\n    textureColor = lighteffect*textureColor;\n#endif\n\n#ifdef TEXMODE_decal\n    textureColor = vec4((1. - textureColor.a)*lighteffect.rgb) +\n                     textureColor.a*textureColor.rgb, \n                     lighteffect.a);\n#endif\n\n#ifdef TEXMODE_blend\n    textureColor = vec4((1. - textureColor.rgb) * lighteffect.rgb,\n                    lighteffect.a*textureColor.a);\n#endif\n\n#ifdef TEXMODE_add\n    textureColor = vec4(lighteffect.rgb + textureColor.rgb,\n                    lighteffect.a*textureColor.a);\n#endif\n    \n#endif //TEXTURE_rgba\n    \n#ifdef TEXTURE_alpha\n    float luminance = dot(vec3(1.,1.,1.),textureColor.rgb)/3.;\n\n#if defined(TEXMODE_replace) || defined(TEXMODE_decal)\n    textureColor = vec4(lighteffect.rgb, luminance);\n#endif \n\n#if defined(TEXMODE_modulate) || defined(TEXMODE_blend) || defined(TEXMODE_add)\n    textureColor = vec4(lighteffect.rgb, lighteffect.a*luminance);\n#endif\n \n#endif // TEXTURE_alpha\n    \n// The TEXTURE_luminance values are not from that reference    \n#ifdef TEXTURE_luminance\n    float luminance = dot(vec3(1.,1.,1.),textureColor.rgb)/3.;\n\n#if defined(TEXMODE_replace) || defined(TEXMODE_decal)\n    textureColor = vec4(luminance, luminance, luminance, lighteffect.a);\n#endif \n\n#ifdef TEXMODE_modulate\n    textureColor = vec4(luminance*lighteffect.rgb, lighteffect.a);\n#endif\n\n#ifdef TEXMODE_blend\n    textureColor = vec4((1. - luminance)*lighteffect.rgb,\n                        lighteffect.a);\n#endif\n\n#ifdef TEXMODE_add\n    textureColor = vec4(luminance + lighteffect.rgb, lighteffect.a);\n#endif\n\n#endif // TEXTURE_luminance\n \n    \n#ifdef TEXTURE_luminance_alpha\n    float luminance = dot(vec3(1.,1.,1.),textureColor.rgb)/3.;\n\n#if defined(TEXMODE_replace) || defined(TEXMODE_decal)\n    textureColor = vec4(luminance, luminance, luminance, textureColor.a);\n#endif \n\n#ifdef TEXMODE_modulate\n    textureColor = vec4(luminance*lighteffect.rgb, \n                        textureColor.a*lighteffect.a);\n#endif\n\n#ifdef TEXMODE_blend\n    textureColor = vec4((1. - luminance)*lighteffect.rgb,\n                        textureColor.a*lighteffect.a);\n#endif\n\n#ifdef TEXMODE_add\n    textureColor = vec4(luminance + lighteffect.rgb, \n                        textureColor.a*lighteffect.a);\n\n#endif\n\n#endif // TEXTURE_luminance_alpha\n    \n    fragColor = textureColor;\n\n#elif defined(IS_TEXT)\n    if (textureColor.a < 0.1)\n      discard;\n    else\n      fragColor = textureColor;\n#else\n    fragColor = lighteffect;\n#endif // HAS_TEXTURE\n    \n#ifdef HAS_FOG\n    // uFogParms elements: x = near, y = far, z = fogscale, w = (1-sin(FOV/2))/(1+sin(FOV/2))\n    // In Exp and Exp2: use density = density/far\n    // fogF will be the proportion of fog\n    // Initialize it to the linear value\n    float fogF;\n    if (uFogMode > 0) {\n      fogF = (uFogParms.y - vPosition.z/vPosition.w)/(uFogParms.y - uFogParms.x);\n      if (uFogMode > 1)\n        fogF = mix(uFogParms.w, 1.0, fogF);\n      fogF = fogF*uFogParms.z;\n      if (uFogMode == 2)\n        fogF = 1.0 - exp(-fogF);\n      // Docs are wrong: use (density*c)^2, not density*c^2\n      // https://gitlab.freedesktop.org/mesa/mesa/-/blob/master/src/mesa/swrast/s_fog.c#L58\n      else if (uFogMode == 3)\n        fogF = 1.0 - exp(-fogF*fogF);\n      fogF = clamp(fogF, 0.0, 1.0);\n      gl_FragColor = vec4(mix(fragColor.rgb, uFogColor, fogF), fragColor.a);\n    } else gl_FragColor = fragColor;\n#else\n    gl_FragColor = fragColor;\n#endif // HAS_FOG\n    \n}",
        "players": [

        ],
        "webGLoptions": {
          "preserveDrawingBuffer": true
        },
        "fastTransparency": true,
        "altText": "3D plot"
      },
      "evals": [

      ],
      "jsHooks": [

      ],
      "deps": [
        {
          "name": "rglwidgetClass",
          "version": "1.3.24",
          "src": {
            "href": "rglwidgetClass-1.3.24"
          },
          "meta": null,
          "script": "rglClass.min.js",
          "stylesheet": "rgl.css",
          "head": null,
          "attachment": null,
          "all_files": false
        },
        {
          "name": "CanvasMatrix4",
          "version": "1.3.24",
          "src": {
            "href": "CanvasMatrix4-1.3.24"
          },
          "meta": null,
          "script": "CanvasMatrix.min.js",
          "stylesheet": null,
          "head": null,
          "attachment": null,
          "all_files": false
        }
      ]
    },
    "x3prgl5": {
      "x": {
        "material": {
          "color": "#000000",
          "alpha": 1,
          "lit": true,
          "ambient": "#000000",
          "specular": "#FFFFFF",
          "emission": "#000000",
          "shininess": 50,
          "smooth": true,
          "front": "filled",
          "back": "filled",
          "size": 3,
          "lwd": 1,
          "fog": true,
          "point_antialias": false,
          "line_antialias": false,
          "texture": null,
          "textype": "rgb",
          "texmode": "modulate",
          "texmipmap": false,
          "texminfilter": "linear",
          "texmagfilter": "linear",
          "texenvmap": false,
          "depth_mask": true,
          "depth_test": "less",
          "isTransparent": false,
          "polygon_offset": [
            0,
            0
          ],
          "margin": "",
          "floating": false,
          "tag": "",
          "blend": [
            "src_alpha",
            "one_minus_src_alpha"
          ]
        },
        "rootSubscene": 46,
        "objects": {
          "55": {
            "id": 55,
            "type": "surface",
            "material": {

            },
            "vertices": "0",
            "colors": "2",
            "dim": [
              [
                9,
                31
              ]
            ],
            "centers": "3",
            "normals": "1",
            "ignoreExtent": false,
            "flipped": false,
            "flags": 32771
          },
          "53": {
            "id": 53,
            "type": "light",
            "vertices": [
              [
                -2265.625,
                1250,
                264.6663818359375
              ]
            ],
            "colors": [
              [
                0.1019607856869698,
                0.1019607856869698,
                0.1019607856869698,
                1
              ],
              [
                0.4000000059604645,
                0.4000000059604645,
                0.4000000059604645,
                1
              ],
              [
                0.4000000059604645,
                0.4000000059604645,
                0.4000000059604645,
                1
              ]
            ],
            "viewpoint": true,
            "finite": true
          },
          "54": {
            "id": 54,
            "type": "light",
            "vertices": [
              [
                0,
                0.258819043636322,
                0.9659258127212524
              ]
            ],
            "colors": [
              [
                1,
                1,
                1,
                1
              ],
              [
                0.2000000029802322,
                0.2000000029802322,
                0.2000000029802322,
                1
              ],
              [
                0.2000000029802322,
                0.2000000029802322,
                0.2000000029802322,
                1
              ]
            ],
            "viewpoint": true,
            "finite": false
          },
          "52": {
            "id": 52,
            "type": "background",
            "material": {
              "lit": false,
              "back": "lines"
            },
            "colors": "4",
            "centers": "5",
            "sphere": false,
            "fogtype": "none",
            "fogscale": 1,
            "flags": 32768
          },
          "46": {
            "id": 46,
            "type": "subscene",
            "par3d": {
              "antialias": 4,
              "FOV": 30,
              "ignoreExtent": false,
              "listeners": 46,
              "mouseMode": {
                "none": "none",
                "left": "trackball",
                "right": "zoom",
                "middle": "fov",
                "wheel": "pull"
              },
              "observer": [
                0,
                0,
                4851.8525390625
              ],
              "modelMatrix": [
                [
                  1,
                  0,
                  0,
                  -390.625
                ],
                [
                  0,
                  1,
                  0,
                  -1250
                ],
                [
                  0,
                  0,
                  1,
                  -4790.99560546875
                ],
                [
                  0,
                  0,
                  0,
                  1
                ]
              ],
              "projMatrix": [
                [
                  9.330126762390137,
                  0,
                  0,
                  0
                ],
                [
                  0,
                  2.705736875534058,
                  0,
                  0
                ],
                [
                  0,
                  0,
                  -3.863703012466431,
                  -17490.365234375
                ],
                [
                  0,
                  0,
                  -1,
                  0
                ]
              ],
              "skipRedraw": false,
              "userMatrix": [
                [
                  1,
                  0,
                  0,
                  0
                ],
                [
                  0,
                  1,
                  0,
                  0
                ],
                [
                  0,
                  0,
                  1,
                  0
                ],
                [
                  0,
                  0,
                  0,
                  1
                ]
              ],
              "userProjection": [
                [
                  1,
                  0,
                  0,
                  0
                ],
                [
                  0,
                  1,
                  0,
                  0
                ],
                [
                  0,
                  0,
                  1,
                  0
                ],
                [
                  0,
                  0,
                  0,
                  1
                ]
              ],
              "scale": [
                1,
                1,
                1
              ],
              "viewport": {
                "x": 0,
                "y": 0,
                "width": 1,
                "height": 1
              },
              "zoom": 0.4000000059604645,
              "bbox": [
                78.125,
                703.125,
                78.125,
                2421.875,
                -386.3800964355469,
                264.6663818359375
              ],
              "windowRect": [
                80,
                125,
                225,
                625
              ],
              "family": "sans",
              "font": 1,
              "cex": 1,
              "useFreeType": true,
              "fontname": "/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/rgl/fonts/FreeSans.ttf",
              "maxClipPlanes": 6,
              "glVersion": 2.1,
              "activeSubscene": 0
            },
            "embeddings": {
              "viewport": "replace",
              "projection": "replace",
              "model": "replace",
              "mouse": "replace"
            },
            "objects": [
              52,
              55,
              53,
              54
            ],
            "subscenes": [

            ],
            "flags": 33027
          }
        },
        "crosstalk": {
          "key": [

          ],
          "group": [

          ],
          "id": [

          ],
          "options": [

          ]
        },
        "width": 146,
        "height": 501,
        "buffer": {
          "accessors": [
            {
              "bufferView": 0,
              "componentType": 5126,
              "count": 279,
              "type": "VEC3"
            },
            {
              "bufferView": 1,
              "componentType": 5126,
              "count": 279,
              "type": "VEC3"
            },
            {
              "bufferView": 2,
              "componentType": 5126,
              "count": 1,
              "type": "VEC4"
            },
            {
              "bufferView": 3,
              "componentType": 5126,
              "count": 240,
              "type": "VEC3"
            },
            {
              "bufferView": 4,
              "componentType": 5121,
              "count": 1,
              "type": "VEC4"
            },
            {
              "bufferView": 5,
              "componentType": 5121,
              "count": 1,
              "type": "VEC3"
            }
          ],
          "bufferViews": [
            {
              "buffer": 0,
              "byteLength": 3348,
              "byteOffset": 0
            },
            {
              "buffer": 0,
              "byteLength": 3348,
              "byteOffset": 3348
            },
            {
              "buffer": 0,
              "byteLength": 16,
              "byteOffset": 6696
            },
            {
              "buffer": 0,
              "byteLength": 2880,
              "byteOffset": 6712
            },
            {
              "buffer": 0,
              "byteLength": 4,
              "byteOffset": 9592
            },
            {
              "buffer": 0,
              "byteLength": 3,
              "byteOffset": 9596
            }
          ],
          "buffers": [
            {
              "byteLength": 9599,
              "bytes": "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"
            }
          ]
        },
        "context": {
          "shiny": true,
          "rmarkdown": null
        },
        "vertexShader": "#line 2 1\n// File 1 is the vertex shader\n#ifdef GL_ES\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#endif\n\nattribute vec3 aPos;\nattribute vec4 aCol;\nuniform mat4 mvMatrix;\nuniform mat4 prMatrix;\nvarying vec4 vCol;\nvarying vec4 vPosition;\n\n#ifdef NEEDS_VNORMAL\nattribute vec3 aNorm;\nuniform mat4 normMatrix;\nvarying vec4 vNormal;\n#endif\n\n#if defined(HAS_TEXTURE) || defined (IS_TEXT)\nattribute vec2 aTexcoord;\nvarying vec2 vTexcoord;\n#endif\n\n#ifdef FIXED_SIZE\nuniform vec3 textScale;\n#endif\n\n#ifdef FIXED_QUADS\nattribute vec3 aOfs;\n#endif\n\n#ifdef IS_TWOSIDED\n#ifdef HAS_NORMALS\nvarying float normz;\nuniform mat4 invPrMatrix;\n#else\nattribute vec3 aPos1;\nattribute vec3 aPos2;\nvarying float normz;\n#endif\n#endif // IS_TWOSIDED\n\n#ifdef FAT_LINES\nattribute vec3 aNext;\nattribute vec2 aPoint;\nvarying vec2 vPoint;\nvarying float vLength;\nuniform float uAspect;\nuniform float uLwd;\n#endif\n\n#ifdef USE_ENVMAP\nvarying vec3 vReflection;\n#endif\n\nvoid main(void) {\n  \n#ifndef IS_BRUSH\n#if defined(NCLIPPLANES) || !defined(FIXED_QUADS) || defined(HAS_FOG) || defined(USE_ENVMAP)\n  vPosition = mvMatrix * vec4(aPos, 1.);\n#endif\n  \n#ifndef FIXED_QUADS\n  gl_Position = prMatrix * vPosition;\n#endif\n#endif // !IS_BRUSH\n  \n#ifdef IS_POINTS\n  gl_PointSize = POINTSIZE;\n#endif\n  \n  vCol = aCol;\n  \n// USE_ENVMAP implies NEEDS_VNORMAL\n\n#ifdef NEEDS_VNORMAL\n  vNormal = normMatrix * vec4(-aNorm, dot(aNorm, aPos));\n#endif\n\n#ifdef USE_ENVMAP\n  vReflection = normalize(reflect(vPosition.xyz/vPosition.w, \n                        normalize(vNormal.xyz/vNormal.w)));\n#endif\n  \n#ifdef IS_TWOSIDED\n#ifdef HAS_NORMALS\n  /* normz should be calculated *after* projection */\n  normz = (invPrMatrix*vNormal).z;\n#else\n  vec4 pos1 = prMatrix*(mvMatrix*vec4(aPos1, 1.));\n  pos1 = pos1/pos1.w - gl_Position/gl_Position.w;\n  vec4 pos2 = prMatrix*(mvMatrix*vec4(aPos2, 1.));\n  pos2 = pos2/pos2.w - gl_Position/gl_Position.w;\n  normz = pos1.x*pos2.y - pos1.y*pos2.x;\n#endif\n#endif // IS_TWOSIDED\n  \n#ifdef NEEDS_VNORMAL\n  vNormal = vec4(normalize(vNormal.xyz), 1);\n#endif\n  \n#if defined(HAS_TEXTURE) || defined(IS_TEXT)\n  vTexcoord = aTexcoord;\n#endif\n  \n#if defined(FIXED_SIZE) && !defined(ROTATING)\n  vec4 pos = prMatrix * mvMatrix * vec4(aPos, 1.);\n  pos = pos/pos.w;\n  gl_Position = pos + vec4(aOfs*textScale, 0.);\n#endif\n  \n#if defined(IS_SPRITES) && !defined(FIXED_SIZE)\n  vec4 pos = mvMatrix * vec4(aPos, 1.);\n  pos = pos/pos.w + vec4(aOfs,  0.);\n  gl_Position = prMatrix*pos;\n#endif\n  \n#ifdef FAT_LINES\n  /* This code was inspired by Matt Deslauriers' code in \n   https://mattdesl.svbtle.com/drawing-lines-is-hard */\n  vec2 aspectVec = vec2(uAspect, 1.0);\n  mat4 projViewModel = prMatrix * mvMatrix;\n  vec4 currentProjected = projViewModel * vec4(aPos, 1.0);\n  currentProjected = currentProjected/currentProjected.w;\n  vec4 nextProjected = projViewModel * vec4(aNext, 1.0);\n  vec2 currentScreen = currentProjected.xy * aspectVec;\n  vec2 nextScreen = (nextProjected.xy / nextProjected.w) * aspectVec;\n  float len = uLwd;\n  vec2 dir = vec2(1.0, 0.0);\n  vPoint = aPoint;\n  vLength = length(nextScreen - currentScreen)/2.0;\n  vLength = vLength/(vLength + len);\n  if (vLength > 0.0) {\n    dir = normalize(nextScreen - currentScreen);\n  }\n  vec2 normal = vec2(-dir.y, dir.x);\n  dir.x /= uAspect;\n  normal.x /= uAspect;\n  vec4 offset = vec4(len*(normal*aPoint.x*aPoint.y - dir), 0.0, 0.0);\n  gl_Position = currentProjected + offset;\n#endif\n  \n#ifdef IS_BRUSH\n  gl_Position = vec4(aPos, 1.);\n#endif\n}",
        "fragmentShader": "#line 2 2\n// File 2 is the fragment shader\n#ifdef GL_ES\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#endif\nvarying vec4 vCol; // carries alpha\nvarying vec4 vPosition;\n#if defined(HAS_TEXTURE) || defined (IS_TEXT)\nvarying vec2 vTexcoord;\nuniform sampler2D uSampler;\n#endif\n\n#ifdef HAS_FOG\nuniform int uFogMode;\nuniform vec3 uFogColor;\nuniform vec4 uFogParms;\n#endif\n\n#if defined(IS_LIT) && !defined(FIXED_QUADS)\nvarying vec4 vNormal;\n#endif\n\n#if NCLIPPLANES > 0\nuniform vec4 vClipplane[NCLIPPLANES];\n#endif\n\n#if NLIGHTS > 0\nuniform mat4 mvMatrix;\n#endif\n\n#ifdef IS_LIT\nuniform vec3 emission;\nuniform float shininess;\n#if NLIGHTS > 0\nuniform vec3 ambient[NLIGHTS];\nuniform vec3 specular[NLIGHTS]; // light*material\nuniform vec3 diffuse[NLIGHTS];\nuniform vec3 lightDir[NLIGHTS];\nuniform bool viewpoint[NLIGHTS];\nuniform bool finite[NLIGHTS];\n#endif\n#endif // IS_LIT\n\n#ifdef IS_TWOSIDED\nuniform bool front;\nvarying float normz;\n#endif\n\n#ifdef FAT_LINES\nvarying vec2 vPoint;\nvarying float vLength;\n#endif\n\n#ifdef USE_ENVMAP\nvarying vec3 vReflection;\n#endif\n\nvoid main(void) {\n  vec4 fragColor;\n#ifdef FAT_LINES\n  vec2 point = vPoint;\n  bool neg = point.y < 0.0;\n  point.y = neg ? (point.y + vLength)/(1.0 - vLength) :\n                 -(point.y - vLength)/(1.0 - vLength);\n#if defined(IS_TRANSPARENT) && defined(IS_LINESTRIP)\n  if (neg && length(point) <= 1.0) discard;\n#endif\n  point.y = min(point.y, 0.0);\n  if (length(point) > 1.0) discard;\n#endif // FAT_LINES\n  \n#ifdef ROUND_POINTS\n  vec2 coord = gl_PointCoord - vec2(0.5);\n  if (length(coord) > 0.5) discard;\n#endif\n  \n#if NCLIPPLANES > 0\n  for (int i = 0; i < NCLIPPLANES; i++)\n    if (dot(vPosition, vClipplane[i]) < 0.0) discard;\n#endif\n    \n#ifdef FIXED_QUADS\n    vec3 n = vec3(0., 0., 1.);\n#elif defined(IS_LIT)\n    vec3 n = normalize(vNormal.xyz);\n#endif\n    \n#ifdef IS_TWOSIDED\n    if ((normz <= 0.) != front) discard;\n#endif\n\n#ifdef IS_LIT\n    vec3 eye = normalize(-vPosition.xyz/vPosition.w);\n    vec3 lightdir;\n    vec4 colDiff;\n    vec3 halfVec;\n    vec4 lighteffect = vec4(emission, 0.);\n    vec3 col;\n    float nDotL;\n#ifdef FIXED_QUADS\n    n = -faceforward(n, n, eye);\n#endif\n    \n#if NLIGHTS > 0\n    // Simulate two-sided lighting\n    if (n.z < 0.0)\n      n = -n;\n    for (int i=0;i<NLIGHTS;i++) {\n      colDiff = vec4(vCol.rgb * diffuse[i], vCol.a);\n      lightdir = lightDir[i];\n      if (!viewpoint[i]) {\n        if (finite[i]) {\n          lightdir = (mvMatrix * vec4(lightdir, 1.)).xyz;\n        } else {\n          lightdir = (mvMatrix * vec4(lightdir, 0.)).xyz;\n        }\n      }\n      if (!finite[i]) {\n        halfVec = normalize(lightdir + eye);\n      } else {\n        lightdir = normalize(lightdir - vPosition.xyz/vPosition.w);\n        halfVec = normalize(lightdir + eye);\n      }\n      col = ambient[i];\n      nDotL = dot(n, lightdir);\n      col = col + max(nDotL, 0.) * colDiff.rgb;\n      col = col + pow(max(dot(halfVec, n), 0.), shininess) * specular[i];\n      lighteffect = lighteffect + vec4(col, colDiff.a);\n    }\n#endif\n    \n#else // not IS_LIT\n    vec4 colDiff = vCol;\n    vec4 lighteffect = colDiff;\n#endif\n    \n#ifdef IS_TEXT\n    vec4 textureColor = lighteffect*texture2D(uSampler, vTexcoord);\n#endif\n    \n#ifdef HAS_TEXTURE\n\n// These calculations use the definitions from \n// https://docs.gl/gl3/glTexEnv\n\n#ifdef USE_ENVMAP\n    float m = 2.0 * sqrt(dot(vReflection, vReflection) + 2.0*vReflection.z + 1.0);\n    vec4 textureColor = texture2D(uSampler, vReflection.xy / m + vec2(0.5, 0.5));\n#else\n    vec4 textureColor = texture2D(uSampler, vTexcoord);\n#endif\n\n#ifdef TEXTURE_rgb\n\n#if defined(TEXMODE_replace) || defined(TEXMODE_decal)\n    textureColor = vec4(textureColor.rgb, lighteffect.a);\n#endif \n\n#ifdef TEXMODE_modulate\n    textureColor = lighteffect*vec4(textureColor.rgb, 1.);\n#endif\n\n#ifdef TEXMODE_blend\n    textureColor = vec4((1. - textureColor.rgb) * lighteffect.rgb, lighteffect.a);\n#endif\n\n#ifdef TEXMODE_add\n    textureColor = vec4(lighteffect.rgb + textureColor.rgb, lighteffect.a);\n#endif\n\n#endif //TEXTURE_rgb\n        \n#ifdef TEXTURE_rgba\n\n#ifdef TEXMODE_replace\n// already done\n#endif \n\n#ifdef TEXMODE_modulate\n    textureColor = lighteffect*textureColor;\n#endif\n\n#ifdef TEXMODE_decal\n    textureColor = vec4((1. - textureColor.a)*lighteffect.rgb) +\n                     textureColor.a*textureColor.rgb, \n                     lighteffect.a);\n#endif\n\n#ifdef TEXMODE_blend\n    textureColor = vec4((1. - textureColor.rgb) * lighteffect.rgb,\n                    lighteffect.a*textureColor.a);\n#endif\n\n#ifdef TEXMODE_add\n    textureColor = vec4(lighteffect.rgb + textureColor.rgb,\n                    lighteffect.a*textureColor.a);\n#endif\n    \n#endif //TEXTURE_rgba\n    \n#ifdef TEXTURE_alpha\n    float luminance = dot(vec3(1.,1.,1.),textureColor.rgb)/3.;\n\n#if defined(TEXMODE_replace) || defined(TEXMODE_decal)\n    textureColor = vec4(lighteffect.rgb, luminance);\n#endif \n\n#if defined(TEXMODE_modulate) || defined(TEXMODE_blend) || defined(TEXMODE_add)\n    textureColor = vec4(lighteffect.rgb, lighteffect.a*luminance);\n#endif\n \n#endif // TEXTURE_alpha\n    \n// The TEXTURE_luminance values are not from that reference    \n#ifdef TEXTURE_luminance\n    float luminance = dot(vec3(1.,1.,1.),textureColor.rgb)/3.;\n\n#if defined(TEXMODE_replace) || defined(TEXMODE_decal)\n    textureColor = vec4(luminance, luminance, luminance, lighteffect.a);\n#endif \n\n#ifdef TEXMODE_modulate\n    textureColor = vec4(luminance*lighteffect.rgb, lighteffect.a);\n#endif\n\n#ifdef TEXMODE_blend\n    textureColor = vec4((1. - luminance)*lighteffect.rgb,\n                        lighteffect.a);\n#endif\n\n#ifdef TEXMODE_add\n    textureColor = vec4(luminance + lighteffect.rgb, lighteffect.a);\n#endif\n\n#endif // TEXTURE_luminance\n \n    \n#ifdef TEXTURE_luminance_alpha\n    float luminance = dot(vec3(1.,1.,1.),textureColor.rgb)/3.;\n\n#if defined(TEXMODE_replace) || defined(TEXMODE_decal)\n    textureColor = vec4(luminance, luminance, luminance, textureColor.a);\n#endif \n\n#ifdef TEXMODE_modulate\n    textureColor = vec4(luminance*lighteffect.rgb, \n                        textureColor.a*lighteffect.a);\n#endif\n\n#ifdef TEXMODE_blend\n    textureColor = vec4((1. - luminance)*lighteffect.rgb,\n                        textureColor.a*lighteffect.a);\n#endif\n\n#ifdef TEXMODE_add\n    textureColor = vec4(luminance + lighteffect.rgb, \n                        textureColor.a*lighteffect.a);\n\n#endif\n\n#endif // TEXTURE_luminance_alpha\n    \n    fragColor = textureColor;\n\n#elif defined(IS_TEXT)\n    if (textureColor.a < 0.1)\n      discard;\n    else\n      fragColor = textureColor;\n#else\n    fragColor = lighteffect;\n#endif // HAS_TEXTURE\n    \n#ifdef HAS_FOG\n    // uFogParms elements: x = near, y = far, z = fogscale, w = (1-sin(FOV/2))/(1+sin(FOV/2))\n    // In Exp and Exp2: use density = density/far\n    // fogF will be the proportion of fog\n    // Initialize it to the linear value\n    float fogF;\n    if (uFogMode > 0) {\n      fogF = (uFogParms.y - vPosition.z/vPosition.w)/(uFogParms.y - uFogParms.x);\n      if (uFogMode > 1)\n        fogF = mix(uFogParms.w, 1.0, fogF);\n      fogF = fogF*uFogParms.z;\n      if (uFogMode == 2)\n        fogF = 1.0 - exp(-fogF);\n      // Docs are wrong: use (density*c)^2, not density*c^2\n      // https://gitlab.freedesktop.org/mesa/mesa/-/blob/master/src/mesa/swrast/s_fog.c#L58\n      else if (uFogMode == 3)\n        fogF = 1.0 - exp(-fogF*fogF);\n      fogF = clamp(fogF, 0.0, 1.0);\n      gl_FragColor = vec4(mix(fragColor.rgb, uFogColor, fogF), fragColor.a);\n    } else gl_FragColor = fragColor;\n#else\n    gl_FragColor = fragColor;\n#endif // HAS_FOG\n    \n}",
        "players": [

        ],
        "webGLoptions": {
          "preserveDrawingBuffer": true
        },
        "fastTransparency": true,
        "altText": "3D plot"
      },
      "evals": [

      ],
      "jsHooks": [

      ],
      "deps": [
        {
          "name": "rglwidgetClass",
          "version": "1.3.24",
          "src": {
            "href": "rglwidgetClass-1.3.24"
          },
          "meta": null,
          "script": "rglClass.min.js",
          "stylesheet": "rgl.css",
          "head": null,
          "attachment": null,
          "all_files": false
        },
        {
          "name": "CanvasMatrix4",
          "version": "1.3.24",
          "src": {
            "href": "CanvasMatrix4-1.3.24"
          },
          "meta": null,
          "script": "CanvasMatrix.min.js",
          "stylesheet": null,
          "head": null,
          "attachment": null,
          "all_files": false
        }
      ]
    },
    "x3prgl6": {
      "x": {
        "material": {
          "color": "#000000",
          "alpha": 1,
          "lit": true,
          "ambient": "#000000",
          "specular": "#FFFFFF",
          "emission": "#000000",
          "shininess": 50,
          "smooth": true,
          "front": "filled",
          "back": "filled",
          "size": 3,
          "lwd": 1,
          "fog": true,
          "point_antialias": false,
          "line_antialias": false,
          "texture": null,
          "textype": "rgb",
          "texmode": "modulate",
          "texmipmap": false,
          "texminfilter": "linear",
          "texmagfilter": "linear",
          "texenvmap": false,
          "depth_mask": true,
          "depth_test": "less",
          "isTransparent": false,
          "polygon_offset": [
            0,
            0
          ],
          "margin": "",
          "floating": false,
          "tag": "",
          "blend": [
            "src_alpha",
            "one_minus_src_alpha"
          ]
        },
        "rootSubscene": 56,
        "objects": {
          "65": {
            "id": 65,
            "type": "surface",
            "material": {

            },
            "vertices": "0",
            "colors": "2",
            "dim": [
              [
                9,
                31
              ]
            ],
            "centers": "3",
            "normals": "1",
            "ignoreExtent": false,
            "flipped": false,
            "flags": 32771
          },
          "63": {
            "id": 63,
            "type": "light",
            "vertices": [
              [
                -2265.625,
                1250,
                321.2802734375
              ]
            ],
            "colors": [
              [
                0.1019607856869698,
                0.1019607856869698,
                0.1019607856869698,
                1
              ],
              [
                0.4000000059604645,
                0.4000000059604645,
                0.4000000059604645,
                1
              ],
              [
                0.4000000059604645,
                0.4000000059604645,
                0.4000000059604645,
                1
              ]
            ],
            "viewpoint": true,
            "finite": true
          },
          "64": {
            "id": 64,
            "type": "light",
            "vertices": [
              [
                0,
                0.258819043636322,
                0.9659258127212524
              ]
            ],
            "colors": [
              [
                1,
                1,
                1,
                1
              ],
              [
                0.2000000029802322,
                0.2000000029802322,
                0.2000000029802322,
                1
              ],
              [
                0.2000000029802322,
                0.2000000029802322,
                0.2000000029802322,
                1
              ]
            ],
            "viewpoint": true,
            "finite": false
          },
          "62": {
            "id": 62,
            "type": "background",
            "material": {
              "lit": false,
              "back": "lines"
            },
            "colors": "4",
            "centers": "5",
            "sphere": false,
            "fogtype": "none",
            "fogscale": 1,
            "flags": 32768
          },
          "56": {
            "id": 56,
            "type": "subscene",
            "par3d": {
              "antialias": 4,
              "FOV": 30,
              "ignoreExtent": false,
              "listeners": 56,
              "mouseMode": {
                "none": "none",
                "left": "trackball",
                "right": "zoom",
                "middle": "fov",
                "wheel": "pull"
              },
              "observer": [
                0,
                0,
                4930.72119140625
              ],
              "modelMatrix": [
                [
                  1,
                  0,
                  0,
                  -390.625
                ],
                [
                  0,
                  1,
                  0,
                  -1250
                ],
                [
                  0,
                  0,
                  1,
                  -4854.95166015625
                ],
                [
                  0,
                  0,
                  0,
                  1
                ]
              ],
              "projMatrix": [
                [
                  9.330126762390137,
                  0,
                  0,
                  0
                ],
                [
                  0,
                  2.705736637115479,
                  0,
                  0
                ],
                [
                  0,
                  0,
                  -3.86370325088501,
                  -17774.6796875
                ],
                [
                  0,
                  0,
                  -1,
                  0
                ]
              ],
              "skipRedraw": false,
              "userMatrix": [
                [
                  1,
                  0,
                  0,
                  0
                ],
                [
                  0,
                  1,
                  0,
                  0
                ],
                [
                  0,
                  0,
                  1,
                  0
                ],
                [
                  0,
                  0,
                  0,
                  1
                ]
              ],
              "userProjection": [
                [
                  1,
                  0,
                  0,
                  0
                ],
                [
                  0,
                  1,
                  0,
                  0
                ],
                [
                  0,
                  0,
                  1,
                  0
                ],
                [
                  0,
                  0,
                  0,
                  1
                ]
              ],
              "scale": [
                1,
                1,
                1
              ],
              "viewport": {
                "x": 0,
                "y": 0,
                "width": 1,
                "height": 1
              },
              "zoom": 0.4000000059604645,
              "bbox": [
                78.125,
                703.125,
                78.125,
                2421.875,
                -472.8195495605469,
                321.2802734375
              ],
              "windowRect": [
                100,
                145,
                245,
                645
              ],
              "family": "sans",
              "font": 1,
              "cex": 1,
              "useFreeType": true,
              "fontname": "/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/rgl/fonts/FreeSans.ttf",
              "maxClipPlanes": 6,
              "glVersion": 2.1,
              "activeSubscene": 0
            },
            "embeddings": {
              "viewport": "replace",
              "projection": "replace",
              "model": "replace",
              "mouse": "replace"
            },
            "objects": [
              62,
              65,
              63,
              64
            ],
            "subscenes": [

            ],
            "flags": 33027
          }
        },
        "crosstalk": {
          "key": [

          ],
          "group": [

          ],
          "id": [

          ],
          "options": [

          ]
        },
        "width": 146,
        "height": 501,
        "buffer": {
          "accessors": [
            {
              "bufferView": 0,
              "componentType": 5126,
              "count": 279,
              "type": "VEC3"
            },
            {
              "bufferView": 1,
              "componentType": 5126,
              "count": 279,
              "type": "VEC3"
            },
            {
              "bufferView": 2,
              "componentType": 5126,
              "count": 1,
              "type": "VEC4"
            },
            {
              "bufferView": 3,
              "componentType": 5126,
              "count": 240,
              "type": "VEC3"
            },
            {
              "bufferView": 4,
              "componentType": 5121,
              "count": 1,
              "type": "VEC4"
            },
            {
              "bufferView": 5,
              "componentType": 5121,
              "count": 1,
              "type": "VEC3"
            }
          ],
          "bufferViews": [
            {
              "buffer": 0,
              "byteLength": 3348,
              "byteOffset": 0
            },
            {
              "buffer": 0,
              "byteLength": 3348,
              "byteOffset": 3348
            },
            {
              "buffer": 0,
              "byteLength": 16,
              "byteOffset": 6696
            },
            {
              "buffer": 0,
              "byteLength": 2880,
              "byteOffset": 6712
            },
            {
              "buffer": 0,
              "byteLength": 4,
              "byteOffset": 9592
            },
            {
              "buffer": 0,
              "byteLength": 3,
              "byteOffset": 9596
            }
          ],
          "buffers": [
            {
              "byteLength": 9599,
              "bytes": "AECcQgBeF0Wv6pDDAEAcQwBeF0U5ro/DAGBqQwBeF0USuo7DAECcQwBeF0VPJpPDAFDDQwBe\nF0WAK5XDAGDqQwBeF0UpwJrDALgIRABeF0WgltTDAEAcRABeF0UAAMB/AMgvRABeF0UAAMB/\nAECcQgB8EkUHtx/DAEAcQwB8EkU0VCjAAGBqQwB8EkXt4C7DAECcQwB8EkVD/BfDAFDDQwB8\nEkW39wbDAGDqQwB8EkVxFAzDALgIRAB8EkUpORrDAEAcRAB8EkUbMqzDAMgvRAB8EkUAAMB/\nAECcQgCaDUUTx7PDAEAcQwCaDUWG0bjDAGBqQwCaDUXri8HDAECcQwCaDUVOh8nDAFDDQwCa\nDUU4jNDDAGDqQwCaDUW4q9fDALgIRACaDUVKFN7DAEAcRACaDUXE9+bDAMgvRACaDUUAAMB/\nAECcQgC4CEX7XD3DAEAcQwC4CEU4HUjDAGBqQwC4CEXfmFnDAECcQwC4CEUw0GHDAFDDQwC4\nCEWZh2vDAGDqQwC4CEXujnjDALgIRAC4CEUAEoTDAEAcRAC4CEXiW5TDAMgvRAC4CEUAAMB/\nAECcQgDWA0VITd/CAEAcQwDWA0VIFQHDAGBqQwDWA0VtMRDDAECcQwDWA0WOXh/DAFDDQwDW\nA0WjMzLDAGDqQwDWA0UU9EPDALgIRADWA0UioVTDAEAcRADWA0UqwWTDAMgvRADWA0U26sHD\nAECcQgDo/USu5A3CAEAcQwDo/UR+3knCAGBqQwDo/UT9qYPCAECcQwDo/UShfKnCAFDDQwDo\n/UTtcMzCAGDqQwDo/USKhPLCALgIRADo/USaCwzDAEAcRADo/URdzx7DAMgvRADo/URtkqHD\nAECcQgAk9ESB5RtCAEAcQwAk9ERixrRBAGBqQwAk9ER2rJhAAECcQwAk9ESBPUvBAFDDQwAk\n9ETD1PDBAGDqQwAk9ERvbEvCALgIRAAk9ETTfovCAEAcRAAk9ER8Y7HCAMgvRAAk9ETpEHXD\nAECcQgBg6kQ4bOBCAEAcQwBg6kR/nrpCAGBqQwBg6kSuFZRCAECcQwBg6kRI+GFCAFDDQwBg\n6kTC5wZCAGDqQwBg6kQAcmRBALgIRABg6kQks5bAAEAcRABg6kSJANTBAMgvRABg6kQImCTD\nAECcQgCc4ERzthtDAEAcQwCc4EQqKRFDAGBqQwCc4ES+TQpDAECcQwCc4ETSFfNCAFDDQwCc\n4ETVVcRCAGDqQwCc4ESbGJZCALgIRACc4ERdK1dCAEAcRACc4EQKRwJCAMgvRACc4ES+iP3C\nAECcQgDY1kR4CEVDAEAcQwDY1kTZ3jZDAGBqQwDY1kTG0ytDAECcQwDY1kRVEhhDAFDDQwDY\n1kQ1WgJDAGDqQwDY1kSwo+tCALgIRADY1kSbY7hCAEAcRADY1kTOfnxCAMgvRADY1kSBhojC\nAECcQgAUzUQWq2hDAEAcQwAUzUSZ/FpDAGBqQwAUzURHMFRDAECcQwAUzURUdUBDAFDDQwAU\nzURumTFDAGDqQwAUzUQdSh1DALgIRAAUzUT4SQNDAEAcRAAUzUQrUdBCAMgvRAAUzUQgwnrB\nAECcQgBQw0Re24RDAEAcQwBQw0StqntDAGBqQwBQw0QBJXFDAECcQwBQw0TisFpDAFDDQwBQ\nw0QiCUNDAGDqQwBQw0TkxilDALgIRABQw0QD+gpDAEAcRABQw0TbJ9tCAMgvRABQw0T1DJpC\nAECcQgCMuUQ+S49DAEAcQwCMuUSErYdDAGBqQwCMuUT8lIFDAECcQwCMuUThC3RDAFDDQwCM\nuUSK0FlDAGDqQwCMuUSxvD9DALgIRACMuUQp/iFDAEAcRACMuUSX4wNDAMgvRACMuUQd3LxC\nAECcQgDIr0RDiZpDAEAcQwDIr0TXs5FDAGBqQwDIr0S5FolDAECcQwDIr0QXSYBDAFDDQwDI\nr0RA6XRDAGDqQwDIr0RmWmFDALgIRADIr0TvM0dDAEAcRADIr0RlSStDAMgvRADIr0T11/dC\nAECcQgAEpkTgo6BDAEAcQwAEpkS7zZRDAGBqQwAEpkS7749DAECcQwAEpkSvBIZDAFDDQwAE\npkRNDoRDAGDqQwAEpkSaCWxDALgIRAAEpkR4zU1DAEAcRAAEpkR+DCxDAMgvRAAEpkQk0wlD\nAECcQgBAnER6NKBDAEAcQwBAnESX0ZZDAGBqQwBAnETu0I5DAECcQwBAnER/uYdDAFDDQwBA\nnEQB9XRDAGDqQwBAnEQdR1ZDALgIRABAnESGdDlDAEAcRABAnEQrDxlDAMgvRABAnESDj+1C\nAECcQgB8kkRkz51DAEAcQwB8kkSa7JRDAGBqQwB8kkS7g4tDAECcQwB8kkTY5odDAFDDQwB8\nkkSF0HdDAGDqQwB8kkSqoVVDALgIRAB8kkQ/zjZDAEAcRAB8kkSiPRVDAMgvRAB8kkThsuJC\nAECcQgC4iETHS5pDAEAcQwC4iEQgwo5DAGBqQwC4iEQCFYZDAECcQwC4iEQWHn9DAFDDQwC4\niESVq2pDAGDqQwC4iET4rktDALgIRAC4iESCMS1DAEAcRAC4iERxrApDAMgvRAC4iER/CM5C\nAECcQgDofURfVpBDAEAcQwDofURAFYVDAGBqQwDofURM43dDAECcQwDofUQ7M2lDAFDDQwDo\nfUQsr1RDAGDqQwDofUQ6nDxDALgIRADofUT/ghxDAEAcRADofUSZ9vJCAMgvRADofUTCDLVC\nAECcQgBgakQqnoVDAEAcQwBgakRHRnVDAGBqQwBgakSe5GBDAECcQwBgakStE0tDAFDDQwBg\nakS1tDpDAGDqQwBgakSBOylDALgIRABgakSInQVDAEAcRABgakQShsVCAMgvRABgakSD531C\nAECcQgDYVkStNWlDAEAcQwDYVkQORU5DAGBqQwDYVkSqLT5DAECcQwDYVkTS7ipDAFDDQwDY\nVkQ/nhtDAGDqQwDYVkQ0k/ZCALgIRADYVkRoGLFCAEAcRADYVkQrXlpCAMgvRADYVkQjnZNB\nAECcQgBQQ0SCJ0ZDAEAcQwBQQ0ST+ypDAGBqQwBQQ0Sp1RVDAECcQwBQQ0Q7vAJDAFDDQwBQ\nQ0SViN1CAGDqQwBQQ0S3PaJCALgIRABQQ0Sr7EhCAEAcRABQQ0TydWdBAMgvRABQQ0QhvqLB\nAECcQgDIL0QT5htDAEAcQwDIL0QgKgBDAGBqQwDIL0TXqdRCAECcQwDIL0Tcm6FCAFDDQwDI\nL0TgS0ZCAGDqQwDIL0S3CoFBALgIRADIL0SR4pTBAEAcRADIL0TpD1bCAMgvRADIL0SZMLLC\nAECcQgBAHES7xd1CAEAcQwBAHESxLaFCAGBqQwBAHEQYRkxCAECcQwBAHER7KqJBAFDDQwBA\nHESwBiLBAGDqQwBAHEThuB3CALgIRABAHEQNr5TCAEAcRABAHEQ4V9/CAMgvRABAHETfUBHD\nAECcQgC4CETjBzBCAEAcQwC4CESxZVJBAGBqQwC4CESItYnBAECcQwC4CET7mDvCAFDDQwC4\nCEQKRJ/CAGDqQwC4CEQY8d/CALgIRAC4CER5aQ3DAEAcRAC4CER8XTTDAMgvRAC4CESMsk3D\nAECcQgBg6kPPELrBAEAcQwBg6kMuA0vCAGBqQwBg6kPbXJ/CAECcQwBg6kOfzeDCAFDDQwBg\n6kM3iBLDAGDqQwBg6kMBvTHDALgIRABg6kP4nlPDAEAcRABg6kPwzXTDAMgvRABg6kNFm4zD\nAECcQgBQw0OzxcLCAEAcQwBQw0OPwv/CAGBqQwBQw0P5ZR7DAECcQwBQw0P4H0DDAFDDQwBQ\nw0MBU2HDAGDqQwBQw0PyCYLDALgIRABQw0O7FpLDAEAcRABQw0NwyaTDAMgvRABQw0O2dLTD\nAECcQgBAnEPaZTvDAEAcQwBAnEPAgFrDAGBqQwBAnEMGknrDAECcQwBAnEMYf43DAFDDQwBA\nnEM8/JzDAGDqQwBAnEPfK67DALgIRABAnEPjqL/DAEAcRABAnEOamNDDAMgvRABAnENUeOLD\nAECcQgBgakNntFjDAEAcQwBgakMEl3TDAGBqQwBgakMpFlXDAECcQwBgakOOD5TDAFDDQwBg\nakOfYp/DAGDqQwBgakMAAMB/ALgIRABgakOP5o7DAEAcRABgakPQQ5TDAMgvRABgakP/OJ/D\nAECcQgBAHEOjO4rDAEAcQwBAHEP3OZrDAGBqQwBAHEMJNqrDAECcQwBAHEPofLfDAFDDQwBA\nHEOtFsPDAGDqQwBAHENALM3DALgIRABAHEMJQNPDAEAcRABAHEMX597DAMgvRABAHEN65+rD\nAECcQgBAnELWp57DAEAcQwBAnEKDC6zDAGBqQwBAnEIkGrnDAECcQwBAnEIKVsnDAFDDQwBA\nnEJOY9XDAGDqQwBAnEIhht7DALgIRABAnELnaOzDAEAcRABAnEIAAMB/AMgvRABAnEIAAMB/\n/oLLvtUwWj9KEK4+hfuHOspVaD8wANc+pGs8PgBLXj9Q0us+DgYhvat1Xj/sjvw+1hOeO1LG\nZT/fueE+5BANPuOLaT+md8U+8WfIPjD2Xj8aGZg+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n6nMIv2j7o71koVc/j7R9PdPtPr6oAns/ZKaPPkD+871G0XM/efiQvfXi3r1a1X0/z+mfPJh4\nu71Q4H4/as6cPiiY873qyXE/UccBP54rE7/gayQ/AIMuP2oH8r5k9Q4/AAAAAAAAAAAAAAAA\nffKjvkY9dj0wCHI/UtYlPkPeSbzPmXw/l8ehPsv3wjsv4XI/Es+bPT39Xb144X4/z+XxPQm8\niL3+oX0/OosnPmufk70G4Hs/sHy9Pjagqzwlw20/YUodP52OPz5WOEQ/AAAAAAAAAAAAAAAA\n0HDAPQBqTz9RHBQ/KovgPU2JTj9ToRQ/YdzaPcK0TT+X6BU/Pn3FPajZSz/G4Bg/L1LkPWjQ\nRz+Adx0/OSn6PXaGRD/vCyE/Zw4iPkA4RD+cWR8/bLGvPqUOOT/RiBk/AAAAAAAAAAAAAAAA\nzkENPumZMD/D7zU/AAsQPtsyMD+wMDY/750NPn6TLj8A3Tc/eJ0SPu7pKT/k8Ds/UxwiPmyZ\nIz8zsEA/Vf8oPmXwHj/mL0Q/w1E9PpHrHj8ECkM/dWTkPo88Ez/xiy8/fmdXP27ztD7AS9E+\nZqwUPiETMD/WEzY/IcAUPi/LLz9KWDY/xVsdPsyJLj8GGTc/2XwmPhZpLT/zqTc/ss8tPvfV\nLD8RyDc/dwUxPqOrKz8Yrjg/qsktPh4iKj+ZSTo/4HsMP9+ZDz/RrR4/ujRWP4wcvD605c8+\nDM8dPgOCLD/v/Dg/hxQjPhMdKz+W/jk/8dwpPjE+KT9mUjs/bEUwPmjxJz/BHjw/3O07Psft\nJT/2Mj0/vDs9PmDQJD8YFz4/9gI8PucuJD/1tT4/2nQLPxjuDT8XEiE/kyhSPxQ0xz7G/9U+\neWolPlgBGD/nykk/zkUhPsPyGz9M+UY/zE8kPkQIIj9f5EE/zyM/PmKtIj/HzT8/8tpQPnGj\nHz+SMkE/mlJJPs9wHT+9fEM/0wlMPkeLGz8y00Q/Q4cPP8TOAT9llic/lA1VP4E3rD4Bp+E+\nd0kZPjkQ9j7mM10/LKMJPpP9+z7kLFw/sDIePvI7AT/ialk/UGdePlhPAD+bblY/WHhlPtI0\nAj9I0VQ/n0hfPp50BT/ANVM/+J11PjaXAT/FEFQ/Q+4XPxfp0D7jmTE/3HZZPy4Pij5aNeg+\nS4IZPvfi2z5T+2M/D1cBPsm+2j6lMGU/ljIjPqj71T6h9mQ/y8djPjh01D4V2mE/+bxXPmPb\n3j7bE2A/KTBsPnh34z4Anl0/jGOQPuBp2T4ZPlw/XHEYP1aMvD5ryDY/jYVUP9nkjj43HPc+\nUYYkPgxxyz5gS2c/ZsAGPumKzD7oQGg/wjEsPlkNyj7/P2c/t3ZmPvBBwj6FvmU/D1JlPirA\ntD7vjWg/rd6LPpbrnD7WbWk/Lo+kPttmij6FVGg/KwkIP6+amD6H/0o/HLQ5P+13vD5w5RQ/\n/XYuPkWpoT7H9G4/cI4VPj2EnT6DsnA/EFc3PmR9lz4sNHA/Ffd+PnZMkD4xNW0/a7yMPnCk\nfD6w5W0/BzCiPvUlUz5UAm0/GAewPsXmOD6M6Gs/xrjaPikbgD4ZbV4/lAX8PoLXjT6PQFM/\nqkdBPncsgT7X9XI/gbUyPljIcz65l3Q/i8I/Ph7/YD58GXU/gylyPmbtcj7gNXE/u/SKPqYe\nkT4ad2s/G9icPsASoj7u0mU/I0epPtzfqj4n/mE/4BDBPtGvoj5Htl4/7WPYPu28lj72bVs/\nXIRoPqoYPj7ZvXQ/SsRNPgg4Nj4jm3Y/eyZIPng0Kj4Xbnc/w19CPryMQT7mpHY/t2FgPoQA\ndj67FnI/TkiaPkw8hD7W+Wo/OM2sPtPDeD7R0Gg/KGDOPtk5az4yyGI/toLpPihHZj5pblw/\nNTKEPubvhz0+vHY/aUBZPlGQiT2blHk/fHRGPg2bmD28a3o/vhc8PkdehD2EGXs/Lm1uPm8H\nLTwC83g/rrGqPs9OUb3f/3A/suS4PgmBp70Vzm0/R8TOPniio70kTWk//GHcPu04j71lYGY/\ni7h6PlUZiryiK3g/OK5ePiRps7yMz3k/J2U6PkkdsLy7qXs/FtlXPlm51rx6KHo/3d+dPhWV\nnb1hunI/26y3Pus+/L3d3mw/a++8PqPxB74kfms/Ba/JPkSjCb6yxWg/m7/NPvl5C74B0Gc/\nnhV1PgjCsL1bk3c/aklrPp2lwr2v9Xc/JEk0PkxL171dj3o/niNYPoQpwL2rE3k/OYWsPkGh\nkb1MV3A/ilK+PssbhL3fFG0/3NLAPvpBlb2Tamw/w+7NPng9qb1XbGk/q6PSPuf5sr3EQWg/\nRySGPgQwNb6l3nI/pcV2Pgz8PL7w63M/ilw8PqtIUL5kL3Y/cbtPPmbKX76ZWnQ/MnOcPuJm\nTL7ZVm4/iqS3PpyOJ74eRGs/+DbDPooMHb7cYWk/q0rMPs7xGr5AhWc/nLTMPovQFb7fo2c/\nloOJPgMweb5RmG4/uyp8Pgp2fb6A428/J0RVPniQib71wHA/EbZYPijwlL623G4/0FmEPppm\nir5ya20/3ZWpPvuAar69U2o//NHFPq/hYL5fVGU/eR7HPkjxZ76fm2Q/P/nCPiSCaL6xdmU/\nVyWKPr9hqb4SgGc/kbB6PpAXrL5s0Wg/hM1jPmeDsL6ndWk/pU5aPuWisr50n2k/JyVtPq2W\nsr5He2g/0W2jPnu/tL6yJWE/flbBPuFmuL5zYVo/kmbAPlU+vL5uxFk/8Dy/PoLuvr4fcFk/\nC9WSPshtzL5f7l4/ALt9PqVX0r4enWA//DpdPqo31r6o12E/8BlUPhy01b6wgmI/f/F6PtSr\n3L75UV4/05uoPtZP5L7zEFU/zlq4Pvmi476y9lE/6H68PpEp4b4WtlE/MKu+PsT64L7MRFE/\nsK6YPpNT2b6I3Fo/8zqFPiqN377tdlw/eGRlPnbj67712ls/pbVnPr79/L7I5FY/zYOKPloN\nBr/Gzk4/O7ekPqCJB79d9Eg/tH6tPkmgBr9ut0c/fSOzPlQ7Br/lu0Y/O6uzPlVMBr++kUY/\nuXCZPp5Q8b4qWVQ/vbmMPtbW+L4IYVQ/DOqBPgabBL9vH1E/Si+JPlmjDb9K6kk/EiGVPpKa\nE7+xa0M/h2CgPpQoFb+w+z8/W9CoPmHyFb+Yiz0/Xl2qPp/gFr/wdDw/EIGoPsUmF7/Bpzw/\nNUSXPimlDr9cqkY/yyeRPq+1Eb8IlEU/LDeNPmxFF7/WFEI/cheTPqh8Gr82bD4/QMKWPqUp\nG7/rJj0/HMWcPrBcGb8RZj0/MX6qPsKMFr+NsDw/1yioPqCOFb9//z0/KZadPsiBFb8iSkA/\ntkSPPuIcH78mUTs/mWmPPnV7Hr/F0js/UYuRPvPpHb9d5Ds/ZK+WPlWjHr8HQzo/YL+WPuyN\nIL+KmTg/DcKUPo/SIb8H5Tc/jpahPr3IH7/a9zY/nnaePnvoHr+eaDg/qoiPPhANIL8Jdzo/\nHGyIPhQ7Jb8GQTc/K9OJPkb3JL/xOjc/+RqQPhbeJL9/GzY/5WCXPryNJb9g/zM/EvOWPmrG\nJr8G9TI/m22TPqxQKL9tPzI/DLCZPhmNKL83sjA/5PCYPo1mKb9rCzA/YdKRPk3fKr/tITA/\nPvuBPsXrM7+aHio/+JiCPiTANL+FHik/sy6IPn50Nb/XQCc/LAaNPpzxNL+wzSY/63uOPuBr\nNL8aDyc/+8SOPgnxNL8wbyY/vWSRPhRlNb+dXiU/GhaSPhqJNb/vDyU/TraOPpblNb/wZiU/\nQZaaPvRfCr9bCEk/Uz9uPiWB976JClg/gKWhPkzdyr4Jt1w//LvGPkmRzL55mlQ/Es6bPq9e\nDL9saEc/UC64PpqQ475uBVI/PYmwPjsRoL74lGI/5DO5Pm+GlT2a7m0/r+K+PgMJtT1xdmw/\nGoChPoWT674Hd1Q/RHpDPumP4b7yj2A/ZJ+OPkXdwb4F9GE/llvKPi1Iw75/7VU/F/CUPiRu\nyr6wCV8/AAAAAAAAAAAAAAAAJ0iJPvklpL1jxXU/S/iNPlUOZr2AinU/8O6gPsYNLL1xyXI/\ntmOcPoELAr/lLU4/bE9sPrpzC78qZU4/eliPPlhqEL/N2kY/+eOePqx/C78ZaUc/UtRvPmEf\n/b4hTFY/ihZIPkAsD7+xPU4/mWYpPnmFMr9ohzI/ZxEXPsi1Ur9DZQw/Y40JPrkXYb8T++k+\ncqCjPmwM1b4Q71k/WOekPgkSyL4OwFw/qB6nPm7Nur7sOV8/nCeYPug5xb7lqF8/DYZ3Pghq\nz75/uWE/RepdPs5L3r731l8/ywNqPi1++L7vC1g/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nzs1NP//+/j7JyEg+AACAPwBg6kIA7RRFiuI4wwBQQ0MA7RRFtZQ7wwC4iEMA7RRFfKdiwwDI\nr0MA7RRF5+VbwwDY1kMA7RRF3rhcwwDo/UMA7RRFZZ+Aw6s6D0SrHBRFG/eZwwBAHEQAfBJF\nGzKswwBg6kIACxBFY+JewwBQQ0MACxBFSI9pwwC4iEMACxBFdKCLwwDIr0MACxBFYWOKwwDY\n1kMACxBFgW+MwwDo/UMACxBFtDmSwwB8EkQACxBFsJavwwBAHEQACxBF8JTJwwBg6kIAKQtF\nbNWLwwBQQ0MAKQtFH86SwwC4iEMAKQtF8DGawwDIr0MAKQtF2y+gwwDY1kMAKQtFzZCmwwDo\n/UMAKQtFXoatwwB8EkQAKQtFfF63wwBAHEQAKQtF06m9wwBg6kIARwZFiI0dwwBQQ0MARwZF\nM78swwC4iEMARwZFQr46wwDIr0MARwZFf7pHwwDY1kMARwZFkI9WwwDo/UMARwZFClJmwwB8\nEkQARwZFhI96w6vCIkSrdgVFkDeYwwBg6kIAZQFFXFajwgBQQ0MAZQFFqcnCwgC4iEMAZQFF\npRHjwgDIr0MAZQFFPiIDwwDY1kMAZQFFnWgVwwDo/UMAZQFFxngnwwB8EkQAZQFFUQ85wwAE\nJkQAZQFFOlGJwwBg6kIABvlE9PTCwABQQ0MABvlE3dyxwQC4iEMABvlEw4EewgDIr0MABvlE\nN8VlwgDY1kMABvlEODiYwgDo/UMABvlEM/S+wgB8EkQABvlEEKbkwgAEJkQABvlEuO1LwwBg\n6kIAQu9ExIuFQgBQQ0MAQu9ERrhCQgC4iEMAQu9E6TT1QQDIr0MAQu9ESKY9QQDY1kMAQu9E\njtIDwQDo/UMAQu9E/BHewQB8EkQAQu9E0qY9wgAEJkQAQu9EsDYDwwBg6kIAfuVEfTL9QgBQ\nQ0MAfuVEf2jhQgC4iEMAfuVEyDDDQgDIr0MAfuVE6/aaQgDY1kMAfuVESDhdQgDo/UMAfuVE\nrGgKQgB8EkQAfuVEvptcQQAEJkQAfuVEWqWOwgBg6kIAuttEuzEqQwBQQ0MAuttEYoofQwC4\niEMAuttEse8RQwDIr0MAuttELhH7QgDY1kMAuttEorHSQgDo/UMAuttEZW2pQgB8EkQAuttE\nHK5xQgAEJkQAuttEU6zGwQBg6kIA9tFEwONPQwBQQ0MA9tFE4HdEQwC4iEMA9tFE7iI2QwDI\nr0MA9tFE0x4jQwDY1kMA9tFE5sMRQwDo/UMA9tFE3kv5QgB8EkQA9tFEB2LDQgAEJkQA9tFE\nzbGmQQBg6kIAMshERkJyQwBQQ0MAMshEI/9mQwC4iEMAMshE4B5YQwDIr0MAMshEMvJDQwDY\n1kMAMshE5ewuQwDo/UMAMshEP1UVQwB8EkQAMshEPwDyQgAEJkQAMshEbouJQgBg6kIAbr5E\nXmqGQwBQQ0MAbr5ELNV/QwC4iEMAbr5E78JwQwDIr0MAbr5EnOVaQwDY1kMAbr5EUJdBQwDo\n/UMAbr5E8J4lQwB8EkQAbr5E7JsHQwAEJkQAbr5EB3bOQgBg6kIAqrREd82QQwBQQ0MAqrRE\nRAOJQwC4iEMAqrRErz6BQwDIr0MAqrRE9tVwQwDY1kMAqrREOPRbQwDo/UMAqrRETJJCQwB8\nEkQAqrRExRcmQwAEJkQAqrREwmECQwBg6kIA5qpErWuYQwBQQ0MA5qpEAuKPQwC4iEMA5qpE\nD9WHQwDIr0MA5qpELTSBQwDY1kMA5qpEdppyQwDo/UMA5qpEWplYQwB8EkQA5qpE0hU7QwAE\nJkQA5qpEQEUXQwBg6kIAIqFE6x2bQwBQQ0MAIqFE/peSQwC4iEMAIqFEth+LQwDIr0MAIqFE\nvxGDQwDY1kMAIqFElNhvQwDo/UMAIqFErmRSQwB8EkQAIqFEahczQwAEJkQAIqFEo20RQwBg\n6kIAXpdEhHCaQwBQQ0MAXpdEtoSRQwC4iEMAXpdEQH2KQwDIr0MAXpdEx4CBQwDY1kMAXpdE\nlCtmQwDo/UMAXpdE5ApHQwB8EkQAXpdE5KMnQwAEJkQAXpdEgJsFQwBg6kIAmo1EefKWQwBQ\nQ0MAmo1E3lGNQwC4iEMAmo1EqEOGQwDIr0MAmo1E91l8QwDY1kMAmo1EL/NgQwDo/UMAmo1E\nGFRBQwB8EkQAmo1EdfogQwAEJkQAmo1E4iP8QgBg6kIA1oNEYp6PQwBQQ0MA1oNEgneFQwC4\niEMA1oNEqBd7QwDIr0MA1oNEBetpQwDY1kMA1oNEfOlRQwDo/UMA1oNE7X80QwB8EkQA1oNE\nEHcTQwAEJkQA1oNELtniQgBg6kIAJHREO2uFQwBQQ0MAJHRELA52QwC4iEMAJHREtUNjQwDI\nr0MAJHREsupQQwDY1kMAJHRE5049QwDo/UMAJHREEP4hQwB8EkQAJHREbi//QgAEJkQAJHRE\nTB+7QgBg6kIAnGBEVv9tQwBQQ0MAnGBEZqdYQwC4iEMAnGBEMkVFQwDIr0MAnGBEXRUzQwDY\n1kMAnGBEBLYeQwDo/UMAnGBEtqsAQwB8EkQAnGBEJ8K7QgAEJkQAnGBEGUhrQgBg6kIAFE1E\ndSdKQwBQQ0MAFE1E/VAzQwC4iEMAFE1EmGsgQwDIr0MAFE1EZgMOQwDY1kMAFE1Ef2XrQgDo\n/UMAFE1E6perQgB8EkQAFE1ESdZPQgAEJkQAFE1ElFWGQQBg6kIAjDlE0kwjQwBQQ0MAjDlE\nEtQKQwC4iEMAjDlEX9rpQgDIr0MAjDlEtvC5QgDY1kMAjDlEusuAQgDo/UMAjDlEC98AQgB8\nEkQAjDlESLjtvwAEJkQAjDlErHwUwgBg6kIABCZE9cTtQgBQQ0MABCZEtRO3QgC4iEMABCZE\n2DyBQgDIr0MABCZEyoUMQgDY1kMABCZEXi2BQADo/UMABCZEdIHowQB8EkQABCZEuBGBwgAE\nJkQABCZEYczHwgBg6kIAfBJECqJ4QgBQQ0MAfBJEEDD/QQC4iEMAfBJEuDznPwDIr0MAfBJE\nv8bowQDY1kMAfBJENClxwgDo/UMAfBJE4pO3wgB8EkQAfBJEDOX9wgAEJkQAfBJEIcMgwwBg\n6kIA6P1DjNSGwABQQ0MA6P1Dj38GwgC4iEMA6P1DFxmAwgDIr0MA6P1DprvAwgDY1kMA6P1D\n8vcAwwDo/UMA6P1DgK8gwwB8EkQA6P1D94xCwwAEJkQA6P1DIAVkwwBg6kIA2NZDg6OVwgBQ\nQ0MA2NZDPFvQwgC4iEMA2NZDzKYHwwDIr0MA2NZDgBgpwwDY1kMA2NZDB2tKwwDo/UMA2NZD\nVGdrwwB8EkQA2NZDqMWGwwAEJkQA2NZDGBCYwwBg6kIAyK9Dr8odwwBQQ0MAyK9DgtY8wwC4\niEMAyK9DigVdwwDIr0MAyK9DaJp9wwDY1kMAyK9D43aPwwDo/UMAyK9DXH2gwwB8EkQAyK9D\nasixwwAEJkQAyK9DxRPDwwBg6kIAuIhDgcxYwwBQQ0MAuIhD/K9nwwC4iEMAuIhDsFiCwwDI\nr0MAuIhDYHuXw1ZV0EOrOo9DlIOjw1Y1AkSrOo9DxpOpwwB8EkQAuIhD99qswwAEJkQAuIhD\ncKO5wwBg6kIAUEND1MaCwwBQQ0MAUENDpVGKwwC4iEMAUENDZROYwwDIr0MAUENDcIGrw1ZV\n0EOrSjZDhIy6w1Y1AkSrSjZD83C6wwB8EkQAUENDYFS1wwAEJkQAUEND2FK/wwBg6kIAYOpC\nPcqbwwBQQ0MAYOpCamWqwwC4iEMAYOpCyAi5wwDIr0MAYOpCPFPGwwDY1kMAYOpCFgvRwwDo\n/UMAYOpC1Nbaw6s6D0RWNQJDWIXfwwAEJkQAQBxDSOfkwwEBAQEAAAA="
            }
          ]
        },
        "context": {
          "shiny": true,
          "rmarkdown": null
        },
        "vertexShader": "#line 2 1\n// File 1 is the vertex shader\n#ifdef GL_ES\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#endif\n\nattribute vec3 aPos;\nattribute vec4 aCol;\nuniform mat4 mvMatrix;\nuniform mat4 prMatrix;\nvarying vec4 vCol;\nvarying vec4 vPosition;\n\n#ifdef NEEDS_VNORMAL\nattribute vec3 aNorm;\nuniform mat4 normMatrix;\nvarying vec4 vNormal;\n#endif\n\n#if defined(HAS_TEXTURE) || defined (IS_TEXT)\nattribute vec2 aTexcoord;\nvarying vec2 vTexcoord;\n#endif\n\n#ifdef FIXED_SIZE\nuniform vec3 textScale;\n#endif\n\n#ifdef FIXED_QUADS\nattribute vec3 aOfs;\n#endif\n\n#ifdef IS_TWOSIDED\n#ifdef HAS_NORMALS\nvarying float normz;\nuniform mat4 invPrMatrix;\n#else\nattribute vec3 aPos1;\nattribute vec3 aPos2;\nvarying float normz;\n#endif\n#endif // IS_TWOSIDED\n\n#ifdef FAT_LINES\nattribute vec3 aNext;\nattribute vec2 aPoint;\nvarying vec2 vPoint;\nvarying float vLength;\nuniform float uAspect;\nuniform float uLwd;\n#endif\n\n#ifdef USE_ENVMAP\nvarying vec3 vReflection;\n#endif\n\nvoid main(void) {\n  \n#ifndef IS_BRUSH\n#if defined(NCLIPPLANES) || !defined(FIXED_QUADS) || defined(HAS_FOG) || defined(USE_ENVMAP)\n  vPosition = mvMatrix * vec4(aPos, 1.);\n#endif\n  \n#ifndef FIXED_QUADS\n  gl_Position = prMatrix * vPosition;\n#endif\n#endif // !IS_BRUSH\n  \n#ifdef IS_POINTS\n  gl_PointSize = POINTSIZE;\n#endif\n  \n  vCol = aCol;\n  \n// USE_ENVMAP implies NEEDS_VNORMAL\n\n#ifdef NEEDS_VNORMAL\n  vNormal = normMatrix * vec4(-aNorm, dot(aNorm, aPos));\n#endif\n\n#ifdef USE_ENVMAP\n  vReflection = normalize(reflect(vPosition.xyz/vPosition.w, \n                        normalize(vNormal.xyz/vNormal.w)));\n#endif\n  \n#ifdef IS_TWOSIDED\n#ifdef HAS_NORMALS\n  /* normz should be calculated *after* projection */\n  normz = (invPrMatrix*vNormal).z;\n#else\n  vec4 pos1 = prMatrix*(mvMatrix*vec4(aPos1, 1.));\n  pos1 = pos1/pos1.w - gl_Position/gl_Position.w;\n  vec4 pos2 = prMatrix*(mvMatrix*vec4(aPos2, 1.));\n  pos2 = pos2/pos2.w - gl_Position/gl_Position.w;\n  normz = pos1.x*pos2.y - pos1.y*pos2.x;\n#endif\n#endif // IS_TWOSIDED\n  \n#ifdef NEEDS_VNORMAL\n  vNormal = vec4(normalize(vNormal.xyz), 1);\n#endif\n  \n#if defined(HAS_TEXTURE) || defined(IS_TEXT)\n  vTexcoord = aTexcoord;\n#endif\n  \n#if defined(FIXED_SIZE) && !defined(ROTATING)\n  vec4 pos = prMatrix * mvMatrix * vec4(aPos, 1.);\n  pos = pos/pos.w;\n  gl_Position = pos + vec4(aOfs*textScale, 0.);\n#endif\n  \n#if defined(IS_SPRITES) && !defined(FIXED_SIZE)\n  vec4 pos = mvMatrix * vec4(aPos, 1.);\n  pos = pos/pos.w + vec4(aOfs,  0.);\n  gl_Position = prMatrix*pos;\n#endif\n  \n#ifdef FAT_LINES\n  /* This code was inspired by Matt Deslauriers' code in \n   https://mattdesl.svbtle.com/drawing-lines-is-hard */\n  vec2 aspectVec = vec2(uAspect, 1.0);\n  mat4 projViewModel = prMatrix * mvMatrix;\n  vec4 currentProjected = projViewModel * vec4(aPos, 1.0);\n  currentProjected = currentProjected/currentProjected.w;\n  vec4 nextProjected = projViewModel * vec4(aNext, 1.0);\n  vec2 currentScreen = currentProjected.xy * aspectVec;\n  vec2 nextScreen = (nextProjected.xy / nextProjected.w) * aspectVec;\n  float len = uLwd;\n  vec2 dir = vec2(1.0, 0.0);\n  vPoint = aPoint;\n  vLength = length(nextScreen - currentScreen)/2.0;\n  vLength = vLength/(vLength + len);\n  if (vLength > 0.0) {\n    dir = normalize(nextScreen - currentScreen);\n  }\n  vec2 normal = vec2(-dir.y, dir.x);\n  dir.x /= uAspect;\n  normal.x /= uAspect;\n  vec4 offset = vec4(len*(normal*aPoint.x*aPoint.y - dir), 0.0, 0.0);\n  gl_Position = currentProjected + offset;\n#endif\n  \n#ifdef IS_BRUSH\n  gl_Position = vec4(aPos, 1.);\n#endif\n}",
        "fragmentShader": "#line 2 2\n// File 2 is the fragment shader\n#ifdef GL_ES\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#endif\nvarying vec4 vCol; // carries alpha\nvarying vec4 vPosition;\n#if defined(HAS_TEXTURE) || defined (IS_TEXT)\nvarying vec2 vTexcoord;\nuniform sampler2D uSampler;\n#endif\n\n#ifdef HAS_FOG\nuniform int uFogMode;\nuniform vec3 uFogColor;\nuniform vec4 uFogParms;\n#endif\n\n#if defined(IS_LIT) && !defined(FIXED_QUADS)\nvarying vec4 vNormal;\n#endif\n\n#if NCLIPPLANES > 0\nuniform vec4 vClipplane[NCLIPPLANES];\n#endif\n\n#if NLIGHTS > 0\nuniform mat4 mvMatrix;\n#endif\n\n#ifdef IS_LIT\nuniform vec3 emission;\nuniform float shininess;\n#if NLIGHTS > 0\nuniform vec3 ambient[NLIGHTS];\nuniform vec3 specular[NLIGHTS]; // light*material\nuniform vec3 diffuse[NLIGHTS];\nuniform vec3 lightDir[NLIGHTS];\nuniform bool viewpoint[NLIGHTS];\nuniform bool finite[NLIGHTS];\n#endif\n#endif // IS_LIT\n\n#ifdef IS_TWOSIDED\nuniform bool front;\nvarying float normz;\n#endif\n\n#ifdef FAT_LINES\nvarying vec2 vPoint;\nvarying float vLength;\n#endif\n\n#ifdef USE_ENVMAP\nvarying vec3 vReflection;\n#endif\n\nvoid main(void) {\n  vec4 fragColor;\n#ifdef FAT_LINES\n  vec2 point = vPoint;\n  bool neg = point.y < 0.0;\n  point.y = neg ? (point.y + vLength)/(1.0 - vLength) :\n                 -(point.y - vLength)/(1.0 - vLength);\n#if defined(IS_TRANSPARENT) && defined(IS_LINESTRIP)\n  if (neg && length(point) <= 1.0) discard;\n#endif\n  point.y = min(point.y, 0.0);\n  if (length(point) > 1.0) discard;\n#endif // FAT_LINES\n  \n#ifdef ROUND_POINTS\n  vec2 coord = gl_PointCoord - vec2(0.5);\n  if (length(coord) > 0.5) discard;\n#endif\n  \n#if NCLIPPLANES > 0\n  for (int i = 0; i < NCLIPPLANES; i++)\n    if (dot(vPosition, vClipplane[i]) < 0.0) discard;\n#endif\n    \n#ifdef FIXED_QUADS\n    vec3 n = vec3(0., 0., 1.);\n#elif defined(IS_LIT)\n    vec3 n = normalize(vNormal.xyz);\n#endif\n    \n#ifdef IS_TWOSIDED\n    if ((normz <= 0.) != front) discard;\n#endif\n\n#ifdef IS_LIT\n    vec3 eye = normalize(-vPosition.xyz/vPosition.w);\n    vec3 lightdir;\n    vec4 colDiff;\n    vec3 halfVec;\n    vec4 lighteffect = vec4(emission, 0.);\n    vec3 col;\n    float nDotL;\n#ifdef FIXED_QUADS\n    n = -faceforward(n, n, eye);\n#endif\n    \n#if NLIGHTS > 0\n    // Simulate two-sided lighting\n    if (n.z < 0.0)\n      n = -n;\n    for (int i=0;i<NLIGHTS;i++) {\n      colDiff = vec4(vCol.rgb * diffuse[i], vCol.a);\n      lightdir = lightDir[i];\n      if (!viewpoint[i]) {\n        if (finite[i]) {\n          lightdir = (mvMatrix * vec4(lightdir, 1.)).xyz;\n        } else {\n          lightdir = (mvMatrix * vec4(lightdir, 0.)).xyz;\n        }\n      }\n      if (!finite[i]) {\n        halfVec = normalize(lightdir + eye);\n      } else {\n        lightdir = normalize(lightdir - vPosition.xyz/vPosition.w);\n        halfVec = normalize(lightdir + eye);\n      }\n      col = ambient[i];\n      nDotL = dot(n, lightdir);\n      col = col + max(nDotL, 0.) * colDiff.rgb;\n      col = col + pow(max(dot(halfVec, n), 0.), shininess) * specular[i];\n      lighteffect = lighteffect + vec4(col, colDiff.a);\n    }\n#endif\n    \n#else // not IS_LIT\n    vec4 colDiff = vCol;\n    vec4 lighteffect = colDiff;\n#endif\n    \n#ifdef IS_TEXT\n    vec4 textureColor = lighteffect*texture2D(uSampler, vTexcoord);\n#endif\n    \n#ifdef HAS_TEXTURE\n\n// These calculations use the definitions from \n// https://docs.gl/gl3/glTexEnv\n\n#ifdef USE_ENVMAP\n    float m = 2.0 * sqrt(dot(vReflection, vReflection) + 2.0*vReflection.z + 1.0);\n    vec4 textureColor = texture2D(uSampler, vReflection.xy / m + vec2(0.5, 0.5));\n#else\n    vec4 textureColor = texture2D(uSampler, vTexcoord);\n#endif\n\n#ifdef TEXTURE_rgb\n\n#if defined(TEXMODE_replace) || defined(TEXMODE_decal)\n    textureColor = vec4(textureColor.rgb, lighteffect.a);\n#endif \n\n#ifdef TEXMODE_modulate\n    textureColor = lighteffect*vec4(textureColor.rgb, 1.);\n#endif\n\n#ifdef TEXMODE_blend\n    textureColor = vec4((1. - textureColor.rgb) * lighteffect.rgb, lighteffect.a);\n#endif\n\n#ifdef TEXMODE_add\n    textureColor = vec4(lighteffect.rgb + textureColor.rgb, lighteffect.a);\n#endif\n\n#endif //TEXTURE_rgb\n        \n#ifdef TEXTURE_rgba\n\n#ifdef TEXMODE_replace\n// already done\n#endif \n\n#ifdef TEXMODE_modulate\n    textureColor = lighteffect*textureColor;\n#endif\n\n#ifdef TEXMODE_decal\n    textureColor = vec4((1. - textureColor.a)*lighteffect.rgb) +\n                     textureColor.a*textureColor.rgb, \n                     lighteffect.a);\n#endif\n\n#ifdef TEXMODE_blend\n    textureColor = vec4((1. - textureColor.rgb) * lighteffect.rgb,\n                    lighteffect.a*textureColor.a);\n#endif\n\n#ifdef TEXMODE_add\n    textureColor = vec4(lighteffect.rgb + textureColor.rgb,\n                    lighteffect.a*textureColor.a);\n#endif\n    \n#endif //TEXTURE_rgba\n    \n#ifdef TEXTURE_alpha\n    float luminance = dot(vec3(1.,1.,1.),textureColor.rgb)/3.;\n\n#if defined(TEXMODE_replace) || defined(TEXMODE_decal)\n    textureColor = vec4(lighteffect.rgb, luminance);\n#endif \n\n#if defined(TEXMODE_modulate) || defined(TEXMODE_blend) || defined(TEXMODE_add)\n    textureColor = vec4(lighteffect.rgb, lighteffect.a*luminance);\n#endif\n \n#endif // TEXTURE_alpha\n    \n// The TEXTURE_luminance values are not from that reference    \n#ifdef TEXTURE_luminance\n    float luminance = dot(vec3(1.,1.,1.),textureColor.rgb)/3.;\n\n#if defined(TEXMODE_replace) || defined(TEXMODE_decal)\n    textureColor = vec4(luminance, luminance, luminance, lighteffect.a);\n#endif \n\n#ifdef TEXMODE_modulate\n    textureColor = vec4(luminance*lighteffect.rgb, lighteffect.a);\n#endif\n\n#ifdef TEXMODE_blend\n    textureColor = vec4((1. - luminance)*lighteffect.rgb,\n                        lighteffect.a);\n#endif\n\n#ifdef TEXMODE_add\n    textureColor = vec4(luminance + lighteffect.rgb, lighteffect.a);\n#endif\n\n#endif // TEXTURE_luminance\n \n    \n#ifdef TEXTURE_luminance_alpha\n    float luminance = dot(vec3(1.,1.,1.),textureColor.rgb)/3.;\n\n#if defined(TEXMODE_replace) || defined(TEXMODE_decal)\n    textureColor = vec4(luminance, luminance, luminance, textureColor.a);\n#endif \n\n#ifdef TEXMODE_modulate\n    textureColor = vec4(luminance*lighteffect.rgb, \n                        textureColor.a*lighteffect.a);\n#endif\n\n#ifdef TEXMODE_blend\n    textureColor = vec4((1. - luminance)*lighteffect.rgb,\n                        textureColor.a*lighteffect.a);\n#endif\n\n#ifdef TEXMODE_add\n    textureColor = vec4(luminance + lighteffect.rgb, \n                        textureColor.a*lighteffect.a);\n\n#endif\n\n#endif // TEXTURE_luminance_alpha\n    \n    fragColor = textureColor;\n\n#elif defined(IS_TEXT)\n    if (textureColor.a < 0.1)\n      discard;\n    else\n      fragColor = textureColor;\n#else\n    fragColor = lighteffect;\n#endif // HAS_TEXTURE\n    \n#ifdef HAS_FOG\n    // uFogParms elements: x = near, y = far, z = fogscale, w = (1-sin(FOV/2))/(1+sin(FOV/2))\n    // In Exp and Exp2: use density = density/far\n    // fogF will be the proportion of fog\n    // Initialize it to the linear value\n    float fogF;\n    if (uFogMode > 0) {\n      fogF = (uFogParms.y - vPosition.z/vPosition.w)/(uFogParms.y - uFogParms.x);\n      if (uFogMode > 1)\n        fogF = mix(uFogParms.w, 1.0, fogF);\n      fogF = fogF*uFogParms.z;\n      if (uFogMode == 2)\n        fogF = 1.0 - exp(-fogF);\n      // Docs are wrong: use (density*c)^2, not density*c^2\n      // https://gitlab.freedesktop.org/mesa/mesa/-/blob/master/src/mesa/swrast/s_fog.c#L58\n      else if (uFogMode == 3)\n        fogF = 1.0 - exp(-fogF*fogF);\n      fogF = clamp(fogF, 0.0, 1.0);\n      gl_FragColor = vec4(mix(fragColor.rgb, uFogColor, fogF), fragColor.a);\n    } else gl_FragColor = fragColor;\n#else\n    gl_FragColor = fragColor;\n#endif // HAS_FOG\n    \n}",
        "players": [

        ],
        "webGLoptions": {
          "preserveDrawingBuffer": true
        },
        "fastTransparency": true,
        "altText": "3D plot"
      },
      "evals": [

      ],
      "jsHooks": [

      ],
      "deps": [
        {
          "name": "rglwidgetClass",
          "version": "1.3.24",
          "src": {
            "href": "rglwidgetClass-1.3.24"
          },
          "meta": null,
          "script": "rglClass.min.js",
          "stylesheet": "rgl.css",
          "head": null,
          "attachment": null,
          "all_files": false
        },
        {
          "name": "CanvasMatrix4",
          "version": "1.3.24",
          "src": {
            "href": "CanvasMatrix4-1.3.24"
          },
          "meta": null,
          "script": "CanvasMatrix.min.js",
          "stylesheet": null,
          "head": null,
          "attachment": null,
          "all_files": false
        }
      ]
    }
  },
  "export": {
    "allbull_export": {

    },
    "cbull_export": {
      "source": [
        "Barrel_1-Bullet_2-Land_1.x3p",
        "Barrel_1-Bullet_2-Land_2.x3p",
        "Barrel_1-Bullet_2-Land_3.x3p",
        "Barrel_1-Bullet_2-Land_4.x3p",
        "Barrel_1-Bullet_2-Land_5.x3p",
        "Barrel_1-Bullet_2-Land_6.x3p"
      ],
      "x3p": [
        null,
        null,
        null,
        null,
        null,
        null
      ],
      "md5sum": [
        "ca0d4e87feb09b5d76f15be2edc0cce0",
        "bf5d73df16b1f085f815a31e8c314e57",
        "c88128f4e7f39d3cf1917396bbfeac5f",
        "ef4db6d34539f336001397eaa874083c",
        "562541fd2d3febb794762019b360d256",
        "7bc57f9feceb6ce64f66d8eb14b01962"
      ],
      "filename": [
        "Barrel_1-Bullet_2-Land_1.x3p",
        "Barrel_1-Bullet_2-Land_2.x3p",
        "Barrel_1-Bullet_2-Land_3.x3p",
        "Barrel_1-Bullet_2-Land_4.x3p",
        "Barrel_1-Bullet_2-Land_5.x3p",
        "Barrel_1-Bullet_2-Land_6.x3p"
      ],
      "land_names": [
        "1",
        "2",
        "3",
        "4",
        "5",
        "6"
      ],
      "bullet_name": [
        "Barrel_1.Bullet_2.Land_.x3p",
        "Barrel_1.Bullet_2.Land_.x3p",
        "Barrel_1.Bullet_2.Land_.x3p",
        "Barrel_1.Bullet_2.Land_.x3p",
        "Barrel_1.Bullet_2.Land_.x3p",
        "Barrel_1.Bullet_2.Land_.x3p"
      ]
    },
    "cbull_name_export": null,
    "comparison_export": null,
    "phase_test_export": null,
    "postCC_export": null,
    "preCC_export": null,
    "show_alert_export": true,
    "stage_export": "upload"
  }
}
